
HMU__ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000425a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ec  00800060  0000425a  000042ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080024c  0080024c  000044da  2**0
                  ALLOC
  3 .stab         000034a4  00000000  00000000  000044dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001411  00000000  00000000  00007980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b52e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000da8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000df42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 14 	call	0x2982	; 0x2982 <main>
      8a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e3       	ldi	r22, 0x36	; 54
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 5c       	subi	r30, 0xC2	; 194
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <start>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * description the function that will be included in the main
 */
void start(void){
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	ce 5e       	subi	r28, 0xEE	; 238
     e3c:	d0 40       	sbci	r29, 0x00	; 0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	//Enable I-bit
	SREG|=(1<<7);
     e48:	af e5       	ldi	r26, 0x5F	; 95
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ef e5       	ldi	r30, 0x5F	; 95
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	8c 93       	st	X, r24
	//initialize the LCD
	LCD_init();
     e56:	0e 94 3c 1a 	call	0x3478	; 0x3478 <LCD_init>
	//initialize the UART
	UART_init(&Config);
     e5a:	8e e3       	ldi	r24, 0x3E	; 62
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <UART_init>
     e62:	ba c3       	rjmp	.+1908   	; 0x15d8 <start+0x7aa>
	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;
	while(passwordVerified == 0)
	{
		LCD_clearScreen();
     e64:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
		LCD_displayString("Plz enter pass");
     e68:	80 e6       	ldi	r24, 0x60	; 96
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>


		enterPassword(password);
     e70:	ce 01       	movw	r24, r28
     e72:	8b 51       	subi	r24, 0x1B	; 27
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	0e 94 3f 12 	call	0x247e	; 0x247e <enterPassword>
     e7a:	fe 01       	movw	r30, r28
     e7c:	e3 52       	subi	r30, 0x23	; 35
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a8 e4       	ldi	r26, 0x48	; 72
     e86:	b2 e4       	ldi	r27, 0x42	; 66
     e88:	80 83       	st	Z, r24
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	a2 83       	std	Z+2, r26	; 0x02
     e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	8e 01       	movw	r16, r28
     e92:	07 52       	subi	r16, 0x27	; 39
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	fe 01       	movw	r30, r28
     e98:	e3 52       	subi	r30, 0x23	; 35
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	a2 83       	std	Z+2, r26	; 0x02
     ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ebe:	fe 01       	movw	r30, r28
     ec0:	e7 52       	subi	r30, 0x27	; 39
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e8       	ldi	r20, 0x80	; 128
     ed2:	5f e3       	ldi	r21, 0x3F	; 63
     ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ed8:	88 23       	and	r24, r24
     eda:	44 f4       	brge	.+16     	; 0xeec <start+0xbe>
		__ticks = 1;
     edc:	fe 01       	movw	r30, r28
     ede:	e9 52       	subi	r30, 0x29	; 41
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	80 83       	st	Z, r24
     eea:	64 c0       	rjmp	.+200    	; 0xfb4 <start+0x186>
	else if (__tmp > 65535)
     eec:	fe 01       	movw	r30, r28
     eee:	e7 52       	subi	r30, 0x27	; 39
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	57 e4       	ldi	r21, 0x47	; 71
     f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f06:	18 16       	cp	r1, r24
     f08:	0c f0       	brlt	.+2      	; 0xf0c <start+0xde>
     f0a:	43 c0       	rjmp	.+134    	; 0xf92 <start+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0c:	fe 01       	movw	r30, r28
     f0e:	e3 52       	subi	r30, 0x23	; 35
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	8e 01       	movw	r16, r28
     f2c:	09 52       	subi	r16, 0x29	; 41
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	f8 01       	movw	r30, r16
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	1f c0       	rjmp	.+62     	; 0xf82 <start+0x154>
     f44:	fe 01       	movw	r30, r28
     f46:	eb 52       	subi	r30, 0x2B	; 43
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f52:	fe 01       	movw	r30, r28
     f54:	eb 52       	subi	r30, 0x2B	; 43
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <start+0x12e>
     f60:	fe 01       	movw	r30, r28
     f62:	eb 52       	subi	r30, 0x2B	; 43
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	de 01       	movw	r26, r28
     f6c:	a9 52       	subi	r26, 0x29	; 41
     f6e:	bf 4f       	sbci	r27, 0xFF	; 255
     f70:	fe 01       	movw	r30, r28
     f72:	e9 52       	subi	r30, 0x29	; 41
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	11 96       	adiw	r26, 0x01	; 1
     f7e:	9c 93       	st	X, r25
     f80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	fe 01       	movw	r30, r28
     f84:	e9 52       	subi	r30, 0x29	; 41
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	d1 f6       	brne	.-76     	; 0xf44 <start+0x116>
     f90:	27 c0       	rjmp	.+78     	; 0xfe0 <start+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f92:	8e 01       	movw	r16, r28
     f94:	09 52       	subi	r16, 0x29	; 41
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	fe 01       	movw	r30, r28
     f9a:	e7 52       	subi	r30, 0x27	; 39
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	f8 01       	movw	r30, r16
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	de 01       	movw	r26, r28
     fb6:	ad 52       	subi	r26, 0x2D	; 45
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	fe 01       	movw	r30, r28
     fbc:	e9 52       	subi	r30, 0x29	; 41
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	8d 93       	st	X+, r24
     fc6:	9c 93       	st	X, r25
     fc8:	fe 01       	movw	r30, r28
     fca:	ed 52       	subi	r30, 0x2D	; 45
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <start+0x1a4>
     fd6:	fe 01       	movw	r30, r28
     fd8:	ed 52       	subi	r30, 0x2D	; 45
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword(password);
     fe0:	ce 01       	movw	r24, r28
     fe2:	8b 51       	subi	r24, 0x1B	; 27
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	0e 94 5f 13 	call	0x26be	; 0x26be <sendPassword>

		LCD_clearScreen();
     fea:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
		LCD_displayString("Confirm Pass");
     fee:	8f e6       	ldi	r24, 0x6F	; 111
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
		enterPassword( confirmPassword );
     ff6:	ce 01       	movw	r24, r28
     ff8:	86 51       	subi	r24, 0x16	; 22
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	0e 94 3f 12 	call	0x247e	; 0x247e <enterPassword>
    1000:	fe 01       	movw	r30, r28
    1002:	e1 53       	subi	r30, 0x31	; 49
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a8 e4       	ldi	r26, 0x48	; 72
    100c:	b2 e4       	ldi	r27, 0x42	; 66
    100e:	80 83       	st	Z, r24
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	a2 83       	std	Z+2, r26	; 0x02
    1014:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1016:	8e 01       	movw	r16, r28
    1018:	05 53       	subi	r16, 0x35	; 53
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	fe 01       	movw	r30, r28
    101e:	e1 53       	subi	r30, 0x31	; 49
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a ef       	ldi	r20, 0xFA	; 250
    1030:	54 e4       	ldi	r21, 0x44	; 68
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	a2 83       	std	Z+2, r26	; 0x02
    1042:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1044:	fe 01       	movw	r30, r28
    1046:	e5 53       	subi	r30, 0x35	; 53
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    105e:	88 23       	and	r24, r24
    1060:	44 f4       	brge	.+16     	; 0x1072 <start+0x244>
		__ticks = 1;
    1062:	fe 01       	movw	r30, r28
    1064:	e7 53       	subi	r30, 0x37	; 55
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	64 c0       	rjmp	.+200    	; 0x113a <start+0x30c>
	else if (__tmp > 65535)
    1072:	fe 01       	movw	r30, r28
    1074:	e5 53       	subi	r30, 0x35	; 53
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	57 e4       	ldi	r21, 0x47	; 71
    1088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    108c:	18 16       	cp	r1, r24
    108e:	0c f0       	brlt	.+2      	; 0x1092 <start+0x264>
    1090:	43 c0       	rjmp	.+134    	; 0x1118 <start+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	fe 01       	movw	r30, r28
    1094:	e1 53       	subi	r30, 0x31	; 49
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8e 01       	movw	r16, r28
    10b2:	07 53       	subi	r16, 0x37	; 55
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	f8 01       	movw	r30, r16
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    10c8:	1f c0       	rjmp	.+62     	; 0x1108 <start+0x2da>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e9 53       	subi	r30, 0x39	; 57
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    10d8:	fe 01       	movw	r30, r28
    10da:	e9 53       	subi	r30, 0x39	; 57
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <start+0x2b4>
    10e6:	fe 01       	movw	r30, r28
    10e8:	e9 53       	subi	r30, 0x39	; 57
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f0:	de 01       	movw	r26, r28
    10f2:	a7 53       	subi	r26, 0x37	; 55
    10f4:	bf 4f       	sbci	r27, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	e7 53       	subi	r30, 0x37	; 55
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	9c 93       	st	X, r25
    1106:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	fe 01       	movw	r30, r28
    110a:	e7 53       	subi	r30, 0x37	; 55
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	d1 f6       	brne	.-76     	; 0x10ca <start+0x29c>
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <start+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	8e 01       	movw	r16, r28
    111a:	07 53       	subi	r16, 0x37	; 55
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	fe 01       	movw	r30, r28
    1120:	e5 53       	subi	r30, 0x35	; 53
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	f8 01       	movw	r30, r16
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	de 01       	movw	r26, r28
    113c:	ab 53       	subi	r26, 0x3B	; 59
    113e:	bf 4f       	sbci	r27, 0xFF	; 255
    1140:	fe 01       	movw	r30, r28
    1142:	e7 53       	subi	r30, 0x37	; 55
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	8d 93       	st	X+, r24
    114c:	9c 93       	st	X, r25
    114e:	fe 01       	movw	r30, r28
    1150:	eb 53       	subi	r30, 0x3B	; 59
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <start+0x32a>
    115c:	fe 01       	movw	r30, r28
    115e:	eb 53       	subi	r30, 0x3B	; 59
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword( confirmPassword );
    1166:	ce 01       	movw	r24, r28
    1168:	86 51       	subi	r24, 0x16	; 22
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	0e 94 5f 13 	call	0x26be	; 0x26be <sendPassword>
    1170:	fe 01       	movw	r30, r28
    1172:	ef 53       	subi	r30, 0x3F	; 63
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a8 e4       	ldi	r26, 0x48	; 72
    117c:	b2 e4       	ldi	r27, 0x42	; 66
    117e:	80 83       	st	Z, r24
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	a2 83       	std	Z+2, r26	; 0x02
    1184:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1186:	8e 01       	movw	r16, r28
    1188:	03 54       	subi	r16, 0x43	; 67
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	fe 01       	movw	r30, r28
    118e:	ef 53       	subi	r30, 0x3F	; 63
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a ef       	ldi	r20, 0xFA	; 250
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	f8 01       	movw	r30, r16
    11ac:	80 83       	st	Z, r24
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	a2 83       	std	Z+2, r26	; 0x02
    11b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11b4:	fe 01       	movw	r30, r28
    11b6:	e3 54       	subi	r30, 0x43	; 67
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	44 f4       	brge	.+16     	; 0x11e2 <start+0x3b4>
		__ticks = 1;
    11d2:	fe 01       	movw	r30, r28
    11d4:	e5 54       	subi	r30, 0x45	; 69
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	64 c0       	rjmp	.+200    	; 0x12aa <start+0x47c>
	else if (__tmp > 65535)
    11e2:	fe 01       	movw	r30, r28
    11e4:	e3 54       	subi	r30, 0x43	; 67
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11fc:	18 16       	cp	r1, r24
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <start+0x3d4>
    1200:	43 c0       	rjmp	.+134    	; 0x1288 <start+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	fe 01       	movw	r30, r28
    1204:	ef 53       	subi	r30, 0x3F	; 63
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8e 01       	movw	r16, r28
    1222:	05 54       	subi	r16, 0x45	; 69
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	f8 01       	movw	r30, r16
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	1f c0       	rjmp	.+62     	; 0x1278 <start+0x44a>
    123a:	fe 01       	movw	r30, r28
    123c:	e7 54       	subi	r30, 0x47	; 71
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	88 ec       	ldi	r24, 0xC8	; 200
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
    1248:	fe 01       	movw	r30, r28
    124a:	e7 54       	subi	r30, 0x47	; 71
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <start+0x424>
    1256:	fe 01       	movw	r30, r28
    1258:	e7 54       	subi	r30, 0x47	; 71
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	de 01       	movw	r26, r28
    1262:	a5 54       	subi	r26, 0x45	; 69
    1264:	bf 4f       	sbci	r27, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	e5 54       	subi	r30, 0x45	; 69
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	9c 93       	st	X, r25
    1276:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	fe 01       	movw	r30, r28
    127a:	e5 54       	subi	r30, 0x45	; 69
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	d1 f6       	brne	.-76     	; 0x123a <start+0x40c>
    1286:	27 c0       	rjmp	.+78     	; 0x12d6 <start+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1288:	8e 01       	movw	r16, r28
    128a:	05 54       	subi	r16, 0x45	; 69
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	fe 01       	movw	r30, r28
    1290:	e3 54       	subi	r30, 0x43	; 67
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	f8 01       	movw	r30, r16
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
    12aa:	de 01       	movw	r26, r28
    12ac:	a9 54       	subi	r26, 0x49	; 73
    12ae:	bf 4f       	sbci	r27, 0xFF	; 255
    12b0:	fe 01       	movw	r30, r28
    12b2:	e5 54       	subi	r30, 0x45	; 69
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	8d 93       	st	X+, r24
    12bc:	9c 93       	st	X, r25
    12be:	fe 01       	movw	r30, r28
    12c0:	e9 54       	subi	r30, 0x49	; 73
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <start+0x49a>
    12cc:	fe 01       	movw	r30, r28
    12ce:	e9 54       	subi	r30, 0x49	; 73
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		passwordVerified = UART_recieveByte();
    12d6:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    12da:	fe 01       	movw	r30, r28
    12dc:	ec 51       	subi	r30, 0x1C	; 28
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	80 83       	st	Z, r24
    12e2:	fe 01       	movw	r30, r28
    12e4:	ed 54       	subi	r30, 0x4D	; 77
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a8 e4       	ldi	r26, 0x48	; 72
    12ee:	b2 e4       	ldi	r27, 0x42	; 66
    12f0:	80 83       	st	Z, r24
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	a2 83       	std	Z+2, r26	; 0x02
    12f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	8e 01       	movw	r16, r28
    12fa:	01 55       	subi	r16, 0x51	; 81
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	fe 01       	movw	r30, r28
    1300:	ed 54       	subi	r30, 0x4D	; 77
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	60 81       	ld	r22, Z
    1306:	71 81       	ldd	r23, Z+1	; 0x01
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	4a ef       	ldi	r20, 0xFA	; 250
    1312:	54 e4       	ldi	r21, 0x44	; 68
    1314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	f8 01       	movw	r30, r16
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1326:	fe 01       	movw	r30, r28
    1328:	e1 55       	subi	r30, 0x51	; 81
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1340:	88 23       	and	r24, r24
    1342:	44 f4       	brge	.+16     	; 0x1354 <start+0x526>
		__ticks = 1;
    1344:	fe 01       	movw	r30, r28
    1346:	e3 55       	subi	r30, 0x53	; 83
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
    1352:	64 c0       	rjmp	.+200    	; 0x141c <start+0x5ee>
	else if (__tmp > 65535)
    1354:	fe 01       	movw	r30, r28
    1356:	e1 55       	subi	r30, 0x51	; 81
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    136e:	18 16       	cp	r1, r24
    1370:	0c f0       	brlt	.+2      	; 0x1374 <start+0x546>
    1372:	43 c0       	rjmp	.+134    	; 0x13fa <start+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	fe 01       	movw	r30, r28
    1376:	ed 54       	subi	r30, 0x4D	; 77
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	8e 01       	movw	r16, r28
    1394:	03 55       	subi	r16, 0x53	; 83
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	f8 01       	movw	r30, r16
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	80 83       	st	Z, r24
    13aa:	1f c0       	rjmp	.+62     	; 0x13ea <start+0x5bc>
    13ac:	fe 01       	movw	r30, r28
    13ae:	e5 55       	subi	r30, 0x55	; 85
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	88 ec       	ldi	r24, 0xC8	; 200
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	fe 01       	movw	r30, r28
    13bc:	e5 55       	subi	r30, 0x55	; 85
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <start+0x596>
    13c8:	fe 01       	movw	r30, r28
    13ca:	e5 55       	subi	r30, 0x55	; 85
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d2:	de 01       	movw	r26, r28
    13d4:	a3 55       	subi	r26, 0x53	; 83
    13d6:	bf 4f       	sbci	r27, 0xFF	; 255
    13d8:	fe 01       	movw	r30, r28
    13da:	e3 55       	subi	r30, 0x53	; 83
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	11 96       	adiw	r26, 0x01	; 1
    13e6:	9c 93       	st	X, r25
    13e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	fe 01       	movw	r30, r28
    13ec:	e3 55       	subi	r30, 0x53	; 83
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	d1 f6       	brne	.-76     	; 0x13ac <start+0x57e>
    13f8:	28 c0       	rjmp	.+80     	; 0x144a <start+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	8e 01       	movw	r16, r28
    13fc:	03 55       	subi	r16, 0x53	; 83
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	fe 01       	movw	r30, r28
    1402:	e1 55       	subi	r30, 0x51	; 81
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	f8 01       	movw	r30, r16
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
    141c:	de 01       	movw	r26, r28
    141e:	a7 55       	subi	r26, 0x57	; 87
    1420:	bf 4f       	sbci	r27, 0xFF	; 255
    1422:	fe 01       	movw	r30, r28
    1424:	e3 55       	subi	r30, 0x53	; 83
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	fe 01       	movw	r30, r28
    1434:	e7 55       	subi	r30, 0x57	; 87
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <start+0x60e>
    1440:	fe 01       	movw	r30, r28
    1442:	e7 55       	subi	r30, 0x57	; 87
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(passwordVerified)
    144a:	fe 01       	movw	r30, r28
    144c:	ec 51       	subi	r30, 0x1C	; 28
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	88 23       	and	r24, r24
    1454:	39 f0       	breq	.+14     	; 0x1464 <start+0x636>
		{
			LCD_clearScreen();
    1456:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
			LCD_displayString("Right Password");
    145a:	8c e7       	ldi	r24, 0x7C	; 124
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <start+0x642>
		}

		else
		{
			LCD_clearScreen();
    1464:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1468:	8b e8       	ldi	r24, 0x8B	; 139
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
    1470:	fe 01       	movw	r30, r28
    1472:	eb 55       	subi	r30, 0x5B	; 91
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e8       	ldi	r25, 0x80	; 128
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b5 e4       	ldi	r27, 0x45	; 69
    147e:	80 83       	st	Z, r24
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	a2 83       	std	Z+2, r26	; 0x02
    1484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	8e 01       	movw	r16, r28
    1488:	0f 55       	subi	r16, 0x5F	; 95
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	fe 01       	movw	r30, r28
    148e:	eb 55       	subi	r30, 0x5B	; 91
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a ef       	ldi	r20, 0xFA	; 250
    14a0:	54 e4       	ldi	r21, 0x44	; 68
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	a2 83       	std	Z+2, r26	; 0x02
    14b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b4:	fe 01       	movw	r30, r28
    14b6:	ef 55       	subi	r30, 0x5F	; 95
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	44 f4       	brge	.+16     	; 0x14e2 <start+0x6b4>
		__ticks = 1;
    14d2:	fe 01       	movw	r30, r28
    14d4:	e1 56       	subi	r30, 0x61	; 97
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	64 c0       	rjmp	.+200    	; 0x15aa <start+0x77c>
	else if (__tmp > 65535)
    14e2:	fe 01       	movw	r30, r28
    14e4:	ef 55       	subi	r30, 0x5F	; 95
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	0c f0       	brlt	.+2      	; 0x1502 <start+0x6d4>
    1500:	43 c0       	rjmp	.+134    	; 0x1588 <start+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1502:	fe 01       	movw	r30, r28
    1504:	eb 55       	subi	r30, 0x5B	; 91
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8e 01       	movw	r16, r28
    1522:	01 56       	subi	r16, 0x61	; 97
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	1f c0       	rjmp	.+62     	; 0x1578 <start+0x74a>
    153a:	fe 01       	movw	r30, r28
    153c:	e3 56       	subi	r30, 0x63	; 99
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	88 ec       	ldi	r24, 0xC8	; 200
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	fe 01       	movw	r30, r28
    154a:	e3 56       	subi	r30, 0x63	; 99
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <start+0x724>
    1556:	fe 01       	movw	r30, r28
    1558:	e3 56       	subi	r30, 0x63	; 99
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	de 01       	movw	r26, r28
    1562:	a1 56       	subi	r26, 0x61	; 97
    1564:	bf 4f       	sbci	r27, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	e1 56       	subi	r30, 0x61	; 97
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	fe 01       	movw	r30, r28
    157a:	e1 56       	subi	r30, 0x61	; 97
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	d1 f6       	brne	.-76     	; 0x153a <start+0x70c>
    1586:	28 c0       	rjmp	.+80     	; 0x15d8 <start+0x7aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	8e 01       	movw	r16, r28
    158a:	01 56       	subi	r16, 0x61	; 97
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	fe 01       	movw	r30, r28
    1590:	ef 55       	subi	r30, 0x5F	; 95
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	f8 01       	movw	r30, r16
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
    15aa:	de 01       	movw	r26, r28
    15ac:	a5 56       	subi	r26, 0x65	; 101
    15ae:	bf 4f       	sbci	r27, 0xFF	; 255
    15b0:	fe 01       	movw	r30, r28
    15b2:	e1 56       	subi	r30, 0x61	; 97
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	9c 93       	st	X, r25
    15be:	8e 93       	st	-X, r24
    15c0:	fe 01       	movw	r30, r28
    15c2:	e5 56       	subi	r30, 0x65	; 101
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <start+0x79c>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e5 56       	subi	r30, 0x65	; 101
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
	//initialize the LCD
	LCD_init();
	//initialize the UART
	UART_init(&Config);
	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;
	while(passwordVerified == 0)
    15d8:	fe 01       	movw	r30, r28
    15da:	ec 51       	subi	r30, 0x1C	; 28
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	88 23       	and	r24, r24
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <start+0x7b8>
    15e4:	3f cc       	rjmp	.-1922   	; 0xe64 <start+0x36>

	}

	while(1)
	{
		optionsDisplay();
    15e6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <optionsDisplay>
		command = KEYPAD_getPressedKey();
    15ea:	0e 94 44 19 	call	0x3288	; 0x3288 <KEYPAD_getPressedKey>
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 51       	subi	r30, 0x1D	; 29
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 83       	st	Z, r24
    15f6:	fe 01       	movw	r30, r28
    15f8:	e9 56       	subi	r30, 0x69	; 105
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	aa ef       	ldi	r26, 0xFA	; 250
    1602:	b3 e4       	ldi	r27, 0x43	; 67
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	8e 01       	movw	r16, r28
    160e:	0d 56       	subi	r16, 0x6D	; 109
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	e9 56       	subi	r30, 0x69	; 105
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a ef       	ldi	r20, 0xFA	; 250
    1626:	54 e4       	ldi	r21, 0x44	; 68
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    163a:	fe 01       	movw	r30, r28
    163c:	ed 56       	subi	r30, 0x6D	; 109
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	44 f4       	brge	.+16     	; 0x1668 <start+0x83a>
		__ticks = 1;
    1658:	fe 01       	movw	r30, r28
    165a:	ef 56       	subi	r30, 0x6F	; 111
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	64 c0       	rjmp	.+200    	; 0x1730 <start+0x902>
	else if (__tmp > 65535)
    1668:	fe 01       	movw	r30, r28
    166a:	ed 56       	subi	r30, 0x6D	; 109
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f0       	brlt	.+2      	; 0x1688 <start+0x85a>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <start+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	fe 01       	movw	r30, r28
    168a:	e9 56       	subi	r30, 0x69	; 105
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 01       	movw	r16, r28
    16a8:	0f 56       	subi	r16, 0x6F	; 111
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	f8 01       	movw	r30, r16
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	1f c0       	rjmp	.+62     	; 0x16fe <start+0x8d0>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e1 57       	subi	r30, 0x71	; 113
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	e1 57       	subi	r30, 0x71	; 113
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <start+0x8aa>
    16dc:	fe 01       	movw	r30, r28
    16de:	e1 57       	subi	r30, 0x71	; 113
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	de 01       	movw	r26, r28
    16e8:	af 56       	subi	r26, 0x6F	; 111
    16ea:	bf 4f       	sbci	r27, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	ef 56       	subi	r30, 0x6F	; 111
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	9c 93       	st	X, r25
    16fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	fe 01       	movw	r30, r28
    1700:	ef 56       	subi	r30, 0x6F	; 111
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	d1 f6       	brne	.-76     	; 0x16c0 <start+0x892>
    170c:	27 c0       	rjmp	.+78     	; 0x175c <start+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	8e 01       	movw	r16, r28
    1710:	0f 56       	subi	r16, 0x6F	; 111
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	fe 01       	movw	r30, r28
    1716:	ed 56       	subi	r30, 0x6D	; 109
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	de 01       	movw	r26, r28
    1732:	a3 57       	subi	r26, 0x73	; 115
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	ef 56       	subi	r30, 0x6F	; 111
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	8d 93       	st	X+, r24
    1742:	9c 93       	st	X, r25
    1744:	fe 01       	movw	r30, r28
    1746:	e3 57       	subi	r30, 0x73	; 115
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <start+0x920>
    1752:	fe 01       	movw	r30, r28
    1754:	e3 57       	subi	r30, 0x73	; 115
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(command);
    175c:	fe 01       	movw	r30, r28
    175e:	ed 51       	subi	r30, 0x1D	; 29
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
    1768:	fe 01       	movw	r30, r28
    176a:	e7 57       	subi	r30, 0x77	; 119
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a8 e4       	ldi	r26, 0x48	; 72
    1774:	b2 e4       	ldi	r27, 0x42	; 66
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	8e 01       	movw	r16, r28
    1780:	0b 57       	subi	r16, 0x7B	; 123
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	e7 57       	subi	r30, 0x77	; 119
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a ef       	ldi	r20, 0xFA	; 250
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 83       	st	Z, r24
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	a2 83       	std	Z+2, r26	; 0x02
    17aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ac:	fe 01       	movw	r30, r28
    17ae:	eb 57       	subi	r30, 0x7B	; 123
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	44 f4       	brge	.+16     	; 0x17da <start+0x9ac>
		__ticks = 1;
    17ca:	fe 01       	movw	r30, r28
    17cc:	ed 57       	subi	r30, 0x7D	; 125
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
    17d8:	64 c0       	rjmp	.+200    	; 0x18a2 <start+0xa74>
	else if (__tmp > 65535)
    17da:	fe 01       	movw	r30, r28
    17dc:	eb 57       	subi	r30, 0x7B	; 123
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	0c f0       	brlt	.+2      	; 0x17fa <start+0x9cc>
    17f8:	43 c0       	rjmp	.+134    	; 0x1880 <start+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	fe 01       	movw	r30, r28
    17fc:	e7 57       	subi	r30, 0x77	; 119
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	51 e4       	ldi	r21, 0x41	; 65
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8e 01       	movw	r16, r28
    181a:	0d 57       	subi	r16, 0x7D	; 125
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	f8 01       	movw	r30, r16
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	1f c0       	rjmp	.+62     	; 0x1870 <start+0xa42>
    1832:	fe 01       	movw	r30, r28
    1834:	ef 57       	subi	r30, 0x7F	; 127
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	fe 01       	movw	r30, r28
    1842:	ef 57       	subi	r30, 0x7F	; 127
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <start+0xa1c>
    184e:	fe 01       	movw	r30, r28
    1850:	ef 57       	subi	r30, 0x7F	; 127
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	de 01       	movw	r26, r28
    185a:	ad 57       	subi	r26, 0x7D	; 125
    185c:	bf 4f       	sbci	r27, 0xFF	; 255
    185e:	fe 01       	movw	r30, r28
    1860:	ed 57       	subi	r30, 0x7D	; 125
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	11 96       	adiw	r26, 0x01	; 1
    186c:	9c 93       	st	X, r25
    186e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1870:	fe 01       	movw	r30, r28
    1872:	ed 57       	subi	r30, 0x7D	; 125
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	d1 f6       	brne	.-76     	; 0x1832 <start+0xa04>
    187e:	28 c0       	rjmp	.+80     	; 0x18d0 <start+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	8e 01       	movw	r16, r28
    1882:	0d 57       	subi	r16, 0x7D	; 125
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	eb 57       	subi	r30, 0x7B	; 123
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	f8 01       	movw	r30, r16
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	de 01       	movw	r26, r28
    18a4:	a1 58       	subi	r26, 0x81	; 129
    18a6:	bf 4f       	sbci	r27, 0xFF	; 255
    18a8:	fe 01       	movw	r30, r28
    18aa:	ed 57       	subi	r30, 0x7D	; 125
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	9c 93       	st	X, r25
    18b6:	8e 93       	st	-X, r24
    18b8:	fe 01       	movw	r30, r28
    18ba:	e1 58       	subi	r30, 0x81	; 129
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <start+0xa94>
    18c6:	fe 01       	movw	r30, r28
    18c8:	e1 58       	subi	r30, 0x81	; 129
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		if(command == '+')
    18d0:	fe 01       	movw	r30, r28
    18d2:	ed 51       	subi	r30, 0x1D	; 29
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	8b 32       	cpi	r24, 0x2B	; 43
    18da:	09 f0       	breq	.+2      	; 0x18de <start+0xab0>
    18dc:	a0 c1       	rjmp	.+832    	; 0x1c1e <start+0xdf0>
		{
			LCD_clearScreen();
    18de:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
			LCD_displayString("Plz enter pass");
    18e2:	80 e6       	ldi	r24, 0x60	; 96
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
			enterPassword(password);
    18ea:	ce 01       	movw	r24, r28
    18ec:	8b 51       	subi	r24, 0x1B	; 27
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	0e 94 3f 12 	call	0x247e	; 0x247e <enterPassword>
    18f4:	fe 01       	movw	r30, r28
    18f6:	e5 58       	subi	r30, 0x85	; 133
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a8 e4       	ldi	r26, 0x48	; 72
    1900:	b2 e4       	ldi	r27, 0x42	; 66
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	8e 01       	movw	r16, r28
    190c:	09 58       	subi	r16, 0x89	; 137
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	fe 01       	movw	r30, r28
    1912:	e5 58       	subi	r30, 0x85	; 133
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	f8 01       	movw	r30, r16
    1930:	80 83       	st	Z, r24
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	a2 83       	std	Z+2, r26	; 0x02
    1936:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1938:	fe 01       	movw	r30, r28
    193a:	e9 58       	subi	r30, 0x89	; 137
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1952:	88 23       	and	r24, r24
    1954:	44 f4       	brge	.+16     	; 0x1966 <start+0xb38>
		__ticks = 1;
    1956:	fe 01       	movw	r30, r28
    1958:	eb 58       	subi	r30, 0x8B	; 139
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
    1964:	64 c0       	rjmp	.+200    	; 0x1a2e <start+0xc00>
	else if (__tmp > 65535)
    1966:	fe 01       	movw	r30, r28
    1968:	e9 58       	subi	r30, 0x89	; 137
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	0c f0       	brlt	.+2      	; 0x1986 <start+0xb58>
    1984:	43 c0       	rjmp	.+134    	; 0x1a0c <start+0xbde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1986:	fe 01       	movw	r30, r28
    1988:	e5 58       	subi	r30, 0x85	; 133
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8e 01       	movw	r16, r28
    19a6:	0b 58       	subi	r16, 0x8B	; 139
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	f8 01       	movw	r30, r16
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
    19bc:	1f c0       	rjmp	.+62     	; 0x19fc <start+0xbce>
    19be:	fe 01       	movw	r30, r28
    19c0:	ed 58       	subi	r30, 0x8D	; 141
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	fe 01       	movw	r30, r28
    19ce:	ed 58       	subi	r30, 0x8D	; 141
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <start+0xba8>
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 58       	subi	r30, 0x8D	; 141
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	de 01       	movw	r26, r28
    19e6:	ab 58       	subi	r26, 0x8B	; 139
    19e8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	eb 58       	subi	r30, 0x8B	; 139
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	11 96       	adiw	r26, 0x01	; 1
    19f8:	9c 93       	st	X, r25
    19fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	fe 01       	movw	r30, r28
    19fe:	eb 58       	subi	r30, 0x8B	; 139
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	d1 f6       	brne	.-76     	; 0x19be <start+0xb90>
    1a0a:	27 c0       	rjmp	.+78     	; 0x1a5a <start+0xc2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	0b 58       	subi	r16, 0x8B	; 139
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	fe 01       	movw	r30, r28
    1a14:	e9 58       	subi	r30, 0x89	; 137
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	f8 01       	movw	r30, r16
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	80 83       	st	Z, r24
    1a2e:	de 01       	movw	r26, r28
    1a30:	af 58       	subi	r26, 0x8F	; 143
    1a32:	bf 4f       	sbci	r27, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	eb 58       	subi	r30, 0x8B	; 139
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	8d 93       	st	X+, r24
    1a40:	9c 93       	st	X, r25
    1a42:	fe 01       	movw	r30, r28
    1a44:	ef 58       	subi	r30, 0x8F	; 143
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <start+0xc1e>
    1a50:	fe 01       	movw	r30, r28
    1a52:	ef 58       	subi	r30, 0x8F	; 143
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	8b 51       	subi	r24, 0x1B	; 27
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	0e 94 5f 13 	call	0x26be	; 0x26be <sendPassword>
			passwordVerified = 0;
    1a64:	fe 01       	movw	r30, r28
    1a66:	ec 51       	subi	r30, 0x1C	; 28
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    1a6c:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1a70:	fe 01       	movw	r30, r28
    1a72:	ec 51       	subi	r30, 0x1C	; 28
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
			if(passwordVerified)
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ec 51       	subi	r30, 0x1C	; 28
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <start+0xc5c>
			{
				openDoor();
    1a84:	0e 94 10 14 	call	0x2820	; 0x2820 <openDoor>
    1a88:	ae cd       	rjmp	.-1188   	; 0x15e6 <start+0x7b8>
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    1a8a:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ee 51       	subi	r30, 0x1E	; 30
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    1a96:	fe 01       	movw	r30, r28
    1a98:	ee 51       	subi	r30, 0x1E	; 30
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	18 f0       	brcs	.+6      	; 0x1aa8 <start+0xc7a>
				{
					securityAlarm();
    1aa2:	0e 94 35 14 	call	0x286a	; 0x286a <securityAlarm>
    1aa6:	9f cd       	rjmp	.-1218   	; 0x15e6 <start+0x7b8>
				}

				else
				{
					LCD_clearScreen();
    1aa8:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    1aac:	8b e8       	ldi	r24, 0x8B	; 139
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e3 59       	subi	r30, 0x93	; 147
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e4       	ldi	r25, 0x40	; 64
    1abe:	ac e1       	ldi	r26, 0x1C	; 28
    1ac0:	b5 e4       	ldi	r27, 0x45	; 69
    1ac2:	80 83       	st	Z, r24
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	a2 83       	std	Z+2, r26	; 0x02
    1ac8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	8e 01       	movw	r16, r28
    1acc:	07 59       	subi	r16, 0x97	; 151
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e3 59       	subi	r30, 0x93	; 147
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	f8 01       	movw	r30, r16
    1af0:	80 83       	st	Z, r24
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af8:	fe 01       	movw	r30, r28
    1afa:	e7 59       	subi	r30, 0x97	; 151
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	44 f4       	brge	.+16     	; 0x1b26 <start+0xcf8>
		__ticks = 1;
    1b16:	fe 01       	movw	r30, r28
    1b18:	e9 59       	subi	r30, 0x99	; 153
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	64 c0       	rjmp	.+200    	; 0x1bee <start+0xdc0>
	else if (__tmp > 65535)
    1b26:	fe 01       	movw	r30, r28
    1b28:	e7 59       	subi	r30, 0x97	; 151
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	0c f0       	brlt	.+2      	; 0x1b46 <start+0xd18>
    1b44:	43 c0       	rjmp	.+134    	; 0x1bcc <start+0xd9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	fe 01       	movw	r30, r28
    1b48:	e3 59       	subi	r30, 0x93	; 147
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8e 01       	movw	r16, r28
    1b66:	09 59       	subi	r16, 0x99	; 153
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	f8 01       	movw	r30, r16
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	1f c0       	rjmp	.+62     	; 0x1bbc <start+0xd8e>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	eb 59       	subi	r30, 0x9B	; 155
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	88 ec       	ldi	r24, 0xC8	; 200
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	eb 59       	subi	r30, 0x9B	; 155
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <start+0xd68>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	eb 59       	subi	r30, 0x9B	; 155
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	de 01       	movw	r26, r28
    1ba6:	a9 59       	subi	r26, 0x99	; 153
    1ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    1baa:	fe 01       	movw	r30, r28
    1bac:	e9 59       	subi	r30, 0x99	; 153
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	11 96       	adiw	r26, 0x01	; 1
    1bb8:	9c 93       	st	X, r25
    1bba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e9 59       	subi	r30, 0x99	; 153
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	d1 f6       	brne	.-76     	; 0x1b7e <start+0xd50>
    1bca:	0d cd       	rjmp	.-1510   	; 0x15e6 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	8e 01       	movw	r16, r28
    1bce:	09 59       	subi	r16, 0x99	; 153
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e7 59       	subi	r30, 0x97	; 151
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	de 01       	movw	r26, r28
    1bf0:	ad 59       	subi	r26, 0x9D	; 157
    1bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 59       	subi	r30, 0x99	; 153
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
    1c04:	fe 01       	movw	r30, r28
    1c06:	ed 59       	subi	r30, 0x9D	; 157
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <start+0xde0>
    1c12:	fe 01       	movw	r30, r28
    1c14:	ed 59       	subi	r30, 0x9D	; 157
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
    1c1c:	e4 cc       	rjmp	.-1592   	; 0x15e6 <start+0x7b8>

			}

		}

		else if(command == '-')
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ed 51       	subi	r30, 0x1D	; 29
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	8d 32       	cpi	r24, 0x2D	; 45
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <start+0xdfe>
    1c2a:	dd cc       	rjmp	.-1606   	; 0x15e6 <start+0x7b8>
		{
			LCD_clearScreen();
    1c2c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
			LCD_displayString("Enter old pass");
    1c30:	8a e9       	ldi	r24, 0x9A	; 154
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>


			enterPassword(password);
    1c38:	ce 01       	movw	r24, r28
    1c3a:	8b 51       	subi	r24, 0x1B	; 27
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	0e 94 3f 12 	call	0x247e	; 0x247e <enterPassword>
    1c42:	fe 01       	movw	r30, r28
    1c44:	e1 5a       	subi	r30, 0xA1	; 161
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a8 e4       	ldi	r26, 0x48	; 72
    1c4e:	b2 e4       	ldi	r27, 0x42	; 66
    1c50:	80 83       	st	Z, r24
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	a2 83       	std	Z+2, r26	; 0x02
    1c56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	05 5a       	subi	r16, 0xA5	; 165
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e1 5a       	subi	r30, 0xA1	; 161
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a ef       	ldi	r20, 0xFA	; 250
    1c72:	54 e4       	ldi	r21, 0x44	; 68
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 83       	st	Z, r24
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	a2 83       	std	Z+2, r26	; 0x02
    1c84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c86:	fe 01       	movw	r30, r28
    1c88:	e5 5a       	subi	r30, 0xA5	; 165
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	44 f4       	brge	.+16     	; 0x1cb4 <start+0xe86>
		__ticks = 1;
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e7 5a       	subi	r30, 0xA7	; 167
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
    1cb2:	64 c0       	rjmp	.+200    	; 0x1d7c <start+0xf4e>
	else if (__tmp > 65535)
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e5 5a       	subi	r30, 0xA5	; 165
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	0c f0       	brlt	.+2      	; 0x1cd4 <start+0xea6>
    1cd2:	43 c0       	rjmp	.+134    	; 0x1d5a <start+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e1 5a       	subi	r30, 0xA1	; 161
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	07 5a       	subi	r16, 0xA7	; 167
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	f8 01       	movw	r30, r16
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
    1d0a:	1f c0       	rjmp	.+62     	; 0x1d4a <start+0xf1c>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e9 5a       	subi	r30, 0xA9	; 169
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e9 5a       	subi	r30, 0xA9	; 169
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <start+0xef6>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5a       	subi	r30, 0xA9	; 169
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	de 01       	movw	r26, r28
    1d34:	a7 5a       	subi	r26, 0xA7	; 167
    1d36:	bf 4f       	sbci	r27, 0xFF	; 255
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e7 5a       	subi	r30, 0xA7	; 167
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 81       	ld	r24, Z
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 93       	st	X, r25
    1d48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e7 5a       	subi	r30, 0xA7	; 167
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	d1 f6       	brne	.-76     	; 0x1d0c <start+0xede>
    1d58:	27 c0       	rjmp	.+78     	; 0x1da8 <start+0xf7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	8e 01       	movw	r16, r28
    1d5c:	07 5a       	subi	r16, 0xA7	; 167
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 5a       	subi	r30, 0xA5	; 165
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	f8 01       	movw	r30, r16
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	de 01       	movw	r26, r28
    1d7e:	ab 5a       	subi	r26, 0xAB	; 171
    1d80:	bf 4f       	sbci	r27, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	e7 5a       	subi	r30, 0xA7	; 167
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	8d 93       	st	X+, r24
    1d8e:	9c 93       	st	X, r25
    1d90:	fe 01       	movw	r30, r28
    1d92:	eb 5a       	subi	r30, 0xAB	; 171
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <start+0xf6c>
    1d9e:	fe 01       	movw	r30, r28
    1da0:	eb 5a       	subi	r30, 0xAB	; 171
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	91 83       	std	Z+1, r25	; 0x01
    1da6:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    1da8:	ce 01       	movw	r24, r28
    1daa:	8b 51       	subi	r24, 0x1B	; 27
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	0e 94 5f 13 	call	0x26be	; 0x26be <sendPassword>

			passwordVerified = 0;
    1db2:	fe 01       	movw	r30, r28
    1db4:	ec 51       	subi	r30, 0x1C	; 28
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    1dba:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ec 51       	subi	r30, 0x1C	; 28
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 83       	st	Z, r24


			if(passwordVerified)
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ec 51       	subi	r30, 0x1C	; 28
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <start+0xfa6>
    1dd2:	cd c2       	rjmp	.+1434   	; 0x236e <start+0x1540>
			{
				LCD_clearScreen();
    1dd4:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
				LCD_displayString("Enter New pass");
    1dd8:	89 ea       	ldi	r24, 0xA9	; 169
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>

				enterPassword(password);
    1de0:	ce 01       	movw	r24, r28
    1de2:	8b 51       	subi	r24, 0x1B	; 27
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	0e 94 3f 12 	call	0x247e	; 0x247e <enterPassword>
    1dea:	fe 01       	movw	r30, r28
    1dec:	ef 5a       	subi	r30, 0xAF	; 175
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a8 e4       	ldi	r26, 0x48	; 72
    1df6:	b2 e4       	ldi	r27, 0x42	; 66
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	a2 83       	std	Z+2, r26	; 0x02
    1dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	8e 01       	movw	r16, r28
    1e02:	03 5b       	subi	r16, 0xB3	; 179
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	fe 01       	movw	r30, r28
    1e08:	ef 5a       	subi	r30, 0xAF	; 175
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	f8 01       	movw	r30, r16
    1e26:	80 83       	st	Z, r24
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	a2 83       	std	Z+2, r26	; 0x02
    1e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e3 5b       	subi	r30, 0xB3	; 179
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	44 f4       	brge	.+16     	; 0x1e5c <start+0x102e>
		__ticks = 1;
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e5 5b       	subi	r30, 0xB5	; 181
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	64 c0       	rjmp	.+200    	; 0x1f24 <start+0x10f6>
	else if (__tmp > 65535)
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e3 5b       	subi	r30, 0xB3	; 179
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	0c f0       	brlt	.+2      	; 0x1e7c <start+0x104e>
    1e7a:	43 c0       	rjmp	.+134    	; 0x1f02 <start+0x10d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ef 5a       	subi	r30, 0xAF	; 175
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8e 01       	movw	r16, r28
    1e9c:	05 5b       	subi	r16, 0xB5	; 181
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	f8 01       	movw	r30, r16
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    1eb2:	1f c0       	rjmp	.+62     	; 0x1ef2 <start+0x10c4>
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5b       	subi	r30, 0xB7	; 183
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e7 5b       	subi	r30, 0xB7	; 183
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <start+0x109e>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e7 5b       	subi	r30, 0xB7	; 183
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	de 01       	movw	r26, r28
    1edc:	a5 5b       	subi	r26, 0xB5	; 181
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e5 5b       	subi	r30, 0xB5	; 181
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	11 96       	adiw	r26, 0x01	; 1
    1eee:	9c 93       	st	X, r25
    1ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e5 5b       	subi	r30, 0xB5	; 181
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	d1 f6       	brne	.-76     	; 0x1eb4 <start+0x1086>
    1f00:	27 c0       	rjmp	.+78     	; 0x1f50 <start+0x1122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	8e 01       	movw	r16, r28
    1f04:	05 5b       	subi	r16, 0xB5	; 181
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e3 5b       	subi	r30, 0xB3	; 179
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	de 01       	movw	r26, r28
    1f26:	a9 5b       	subi	r26, 0xB9	; 185
    1f28:	bf 4f       	sbci	r27, 0xFF	; 255
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e5 5b       	subi	r30, 0xB5	; 181
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	8d 93       	st	X+, r24
    1f36:	9c 93       	st	X, r25
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e9 5b       	subi	r30, 0xB9	; 185
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <start+0x1114>
    1f46:	fe 01       	movw	r30, r28
    1f48:	e9 5b       	subi	r30, 0xB9	; 185
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				sendPassword(password);
    1f50:	ce 01       	movw	r24, r28
    1f52:	8b 51       	subi	r24, 0x1B	; 27
    1f54:	9f 4f       	sbci	r25, 0xFF	; 255
    1f56:	0e 94 5f 13 	call	0x26be	; 0x26be <sendPassword>

				LCD_clearScreen();
    1f5a:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
				LCD_displayString("Confirm New pass");
    1f5e:	88 eb       	ldi	r24, 0xB8	; 184
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>

				enterPassword( confirmPassword );
    1f66:	ce 01       	movw	r24, r28
    1f68:	86 51       	subi	r24, 0x16	; 22
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	0e 94 3f 12 	call	0x247e	; 0x247e <enterPassword>
    1f70:	fe 01       	movw	r30, r28
    1f72:	ed 5b       	subi	r30, 0xBD	; 189
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a8 e4       	ldi	r26, 0x48	; 72
    1f7c:	b2 e4       	ldi	r27, 0x42	; 66
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	8e 01       	movw	r16, r28
    1f88:	01 5c       	subi	r16, 0xC1	; 193
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ed 5b       	subi	r30, 0xBD	; 189
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ff 96       	adiw	r30, 0x3f	; 63
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <start+0x11ac>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9e af       	std	Y+62, r25	; 0x3e
    1fd6:	8d af       	std	Y+61, r24	; 0x3d
    1fd8:	46 c0       	rjmp	.+140    	; 0x2066 <start+0x1238>
	else if (__tmp > 65535)
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ff 96       	adiw	r30, 0x3f	; 63
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	64 f5       	brge	.+88     	; 0x204e <start+0x1220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ed 5b       	subi	r30, 0xBD	; 189
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e af       	std	Y+62, r25	; 0x3e
    2022:	8d af       	std	Y+61, r24	; 0x3d
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <start+0x1216>
    2026:	88 ec       	ldi	r24, 0xC8	; 200
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9c af       	std	Y+60, r25	; 0x3c
    202c:	8b af       	std	Y+59, r24	; 0x3b
    202e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2030:	9c ad       	ldd	r25, Y+60	; 0x3c
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <start+0x1204>
    2036:	9c af       	std	Y+60, r25	; 0x3c
    2038:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	8d ad       	ldd	r24, Y+61	; 0x3d
    203c:	9e ad       	ldd	r25, Y+62	; 0x3e
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9e af       	std	Y+62, r25	; 0x3e
    2042:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	8d ad       	ldd	r24, Y+61	; 0x3d
    2046:	9e ad       	ldd	r25, Y+62	; 0x3e
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	69 f7       	brne	.-38     	; 0x2026 <start+0x11f8>
    204c:	16 c0       	rjmp	.+44     	; 0x207a <start+0x124c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	fe 01       	movw	r30, r28
    2050:	ff 96       	adiw	r30, 0x3f	; 63
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e af       	std	Y+62, r25	; 0x3e
    2064:	8d af       	std	Y+61, r24	; 0x3d
    2066:	8d ad       	ldd	r24, Y+61	; 0x3d
    2068:	9e ad       	ldd	r25, Y+62	; 0x3e
    206a:	9a af       	std	Y+58, r25	; 0x3a
    206c:	89 af       	std	Y+57, r24	; 0x39
    206e:	89 ad       	ldd	r24, Y+57	; 0x39
    2070:	9a ad       	ldd	r25, Y+58	; 0x3a
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <start+0x1244>
    2076:	9a af       	std	Y+58, r25	; 0x3a
    2078:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				sendPassword( confirmPassword );
    207a:	ce 01       	movw	r24, r28
    207c:	86 51       	subi	r24, 0x16	; 22
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	0e 94 5f 13 	call	0x26be	; 0x26be <sendPassword>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a8 e4       	ldi	r26, 0x48	; 72
    208a:	b2 e4       	ldi	r27, 0x42	; 66
    208c:	8d ab       	std	Y+53, r24	; 0x35
    208e:	9e ab       	std	Y+54, r25	; 0x36
    2090:	af ab       	std	Y+55, r26	; 0x37
    2092:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6d a9       	ldd	r22, Y+53	; 0x35
    2096:	7e a9       	ldd	r23, Y+54	; 0x36
    2098:	8f a9       	ldd	r24, Y+55	; 0x37
    209a:	98 ad       	ldd	r25, Y+56	; 0x38
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	89 ab       	std	Y+49, r24	; 0x31
    20ae:	9a ab       	std	Y+50, r25	; 0x32
    20b0:	ab ab       	std	Y+51, r26	; 0x33
    20b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20b4:	69 a9       	ldd	r22, Y+49	; 0x31
    20b6:	7a a9       	ldd	r23, Y+50	; 0x32
    20b8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ba:	9c a9       	ldd	r25, Y+52	; 0x34
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <start+0x12a8>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	98 ab       	std	Y+48, r25	; 0x30
    20d2:	8f a7       	std	Y+47, r24	; 0x2f
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <start+0x1326>
	else if (__tmp > 65535)
    20d6:	69 a9       	ldd	r22, Y+49	; 0x31
    20d8:	7a a9       	ldd	r23, Y+50	; 0x32
    20da:	8b a9       	ldd	r24, Y+51	; 0x33
    20dc:	9c a9       	ldd	r25, Y+52	; 0x34
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <start+0x1312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6d a9       	ldd	r22, Y+53	; 0x35
    20f0:	7e a9       	ldd	r23, Y+54	; 0x36
    20f2:	8f a9       	ldd	r24, Y+55	; 0x37
    20f4:	98 ad       	ldd	r25, Y+56	; 0x38
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	98 ab       	std	Y+48, r25	; 0x30
    2114:	8f a7       	std	Y+47, r24	; 0x2f
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <start+0x1308>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9e a7       	std	Y+46, r25	; 0x2e
    211e:	8d a7       	std	Y+45, r24	; 0x2d
    2120:	8d a5       	ldd	r24, Y+45	; 0x2d
    2122:	9e a5       	ldd	r25, Y+46	; 0x2e
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <start+0x12f6>
    2128:	9e a7       	std	Y+46, r25	; 0x2e
    212a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8f a5       	ldd	r24, Y+47	; 0x2f
    212e:	98 a9       	ldd	r25, Y+48	; 0x30
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	98 ab       	std	Y+48, r25	; 0x30
    2134:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8f a5       	ldd	r24, Y+47	; 0x2f
    2138:	98 a9       	ldd	r25, Y+48	; 0x30
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <start+0x12ea>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <start+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	69 a9       	ldd	r22, Y+49	; 0x31
    2142:	7a a9       	ldd	r23, Y+50	; 0x32
    2144:	8b a9       	ldd	r24, Y+51	; 0x33
    2146:	9c a9       	ldd	r25, Y+52	; 0x34
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	98 ab       	std	Y+48, r25	; 0x30
    2152:	8f a7       	std	Y+47, r24	; 0x2f
    2154:	8f a5       	ldd	r24, Y+47	; 0x2f
    2156:	98 a9       	ldd	r25, Y+48	; 0x30
    2158:	9c a7       	std	Y+44, r25	; 0x2c
    215a:	8b a7       	std	Y+43, r24	; 0x2b
    215c:	8b a5       	ldd	r24, Y+43	; 0x2b
    215e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <start+0x1332>
    2164:	9c a7       	std	Y+44, r25	; 0x2c
    2166:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);

				passwordVerified = 0;
    2168:	fe 01       	movw	r30, r28
    216a:	ec 51       	subi	r30, 0x1C	; 28
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	10 82       	st	Z, r1
				passwordVerified = UART_recieveByte();
    2170:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    2174:	fe 01       	movw	r30, r28
    2176:	ec 51       	subi	r30, 0x1C	; 28
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 83       	st	Z, r24

				if(passwordVerified)
    217c:	fe 01       	movw	r30, r28
    217e:	ec 51       	subi	r30, 0x1C	; 28
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	88 23       	and	r24, r24
    2186:	09 f4       	brne	.+2      	; 0x218a <start+0x135c>
    2188:	79 c0       	rjmp	.+242    	; 0x227c <start+0x144e>
				{
					LCD_clearScreen();
    218a:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
					LCD_displayString("Password Changed");
    218e:	89 ec       	ldi	r24, 0xC9	; 201
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e8       	ldi	r25, 0x80	; 128
    219a:	ab e3       	ldi	r26, 0x3B	; 59
    219c:	b5 e4       	ldi	r27, 0x45	; 69
    219e:	8f a3       	std	Y+39, r24	; 0x27
    21a0:	98 a7       	std	Y+40, r25	; 0x28
    21a2:	a9 a7       	std	Y+41, r26	; 0x29
    21a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	6f a1       	ldd	r22, Y+39	; 0x27
    21a8:	78 a5       	ldd	r23, Y+40	; 0x28
    21aa:	89 a5       	ldd	r24, Y+41	; 0x29
    21ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a ef       	ldi	r20, 0xFA	; 250
    21b4:	54 e4       	ldi	r21, 0x44	; 68
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8b a3       	std	Y+35, r24	; 0x23
    21c0:	9c a3       	std	Y+36, r25	; 0x24
    21c2:	ad a3       	std	Y+37, r26	; 0x25
    21c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21c6:	6b a1       	ldd	r22, Y+35	; 0x23
    21c8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ca:	8d a1       	ldd	r24, Y+37	; 0x25
    21cc:	9e a1       	ldd	r25, Y+38	; 0x26
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <start+0x13ba>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <start+0x1438>
	else if (__tmp > 65535)
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	57 e4       	ldi	r21, 0x47	; 71
    21f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <start+0x1424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	6f a1       	ldd	r22, Y+39	; 0x27
    2202:	78 a5       	ldd	r23, Y+40	; 0x28
    2204:	89 a5       	ldd	r24, Y+41	; 0x29
    2206:	9a a5       	ldd	r25, Y+42	; 0x2a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9a a3       	std	Y+34, r25	; 0x22
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <start+0x141a>
    222a:	88 ec       	ldi	r24, 0xC8	; 200
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	98 a3       	std	Y+32, r25	; 0x20
    2230:	8f 8f       	std	Y+31, r24	; 0x1f
    2232:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2234:	98 a1       	ldd	r25, Y+32	; 0x20
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <start+0x1408>
    223a:	98 a3       	std	Y+32, r25	; 0x20
    223c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	89 a1       	ldd	r24, Y+33	; 0x21
    2240:	9a a1       	ldd	r25, Y+34	; 0x22
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9a a3       	std	Y+34, r25	; 0x22
    2246:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	69 f7       	brne	.-38     	; 0x222a <start+0x13fc>
    2250:	ca c9       	rjmp	.-3180   	; 0x15e6 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6b a1       	ldd	r22, Y+35	; 0x23
    2254:	7c a1       	ldd	r23, Y+36	; 0x24
    2256:	8d a1       	ldd	r24, Y+37	; 0x25
    2258:	9e a1       	ldd	r25, Y+38	; 0x26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a a3       	std	Y+34, r25	; 0x22
    2264:	89 a3       	std	Y+33, r24	; 0x21
    2266:	89 a1       	ldd	r24, Y+33	; 0x21
    2268:	9a a1       	ldd	r25, Y+34	; 0x22
    226a:	9e 8f       	std	Y+30, r25	; 0x1e
    226c:	8d 8f       	std	Y+29, r24	; 0x1d
    226e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2270:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <start+0x1444>
    2276:	9e 8f       	std	Y+30, r25	; 0x1e
    2278:	8d 8f       	std	Y+29, r24	; 0x1d
    227a:	b5 c9       	rjmp	.-3222   	; 0x15e6 <start+0x7b8>
					_delay_ms(3000);
				}

				else
				{
					LCD_clearScreen();
    227c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    2280:	8b e8       	ldi	r24, 0x8B	; 139
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e4       	ldi	r25, 0x40	; 64
    228c:	ac e1       	ldi	r26, 0x1C	; 28
    228e:	b5 e4       	ldi	r27, 0x45	; 69
    2290:	89 8f       	std	Y+25, r24	; 0x19
    2292:	9a 8f       	std	Y+26, r25	; 0x1a
    2294:	ab 8f       	std	Y+27, r26	; 0x1b
    2296:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	69 8d       	ldd	r22, Y+25	; 0x19
    229a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8d 8b       	std	Y+21, r24	; 0x15
    22b2:	9e 8b       	std	Y+22, r25	; 0x16
    22b4:	af 8b       	std	Y+23, r26	; 0x17
    22b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ba:	7e 89       	ldd	r23, Y+22	; 0x16
    22bc:	8f 89       	ldd	r24, Y+23	; 0x17
    22be:	98 8d       	ldd	r25, Y+24	; 0x18
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <start+0x14ac>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9c 8b       	std	Y+20, r25	; 0x14
    22d6:	8b 8b       	std	Y+19, r24	; 0x13
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <start+0x152a>
	else if (__tmp > 65535)
    22da:	6d 89       	ldd	r22, Y+21	; 0x15
    22dc:	7e 89       	ldd	r23, Y+22	; 0x16
    22de:	8f 89       	ldd	r24, Y+23	; 0x17
    22e0:	98 8d       	ldd	r25, Y+24	; 0x18
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <start+0x1516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	69 8d       	ldd	r22, Y+25	; 0x19
    22f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9c 8b       	std	Y+20, r25	; 0x14
    2318:	8b 8b       	std	Y+19, r24	; 0x13
    231a:	0f c0       	rjmp	.+30     	; 0x233a <start+0x150c>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9a 8b       	std	Y+18, r25	; 0x12
    2322:	89 8b       	std	Y+17, r24	; 0x11
    2324:	89 89       	ldd	r24, Y+17	; 0x11
    2326:	9a 89       	ldd	r25, Y+18	; 0x12
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <start+0x14fa>
    232c:	9a 8b       	std	Y+18, r25	; 0x12
    232e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8b 89       	ldd	r24, Y+19	; 0x13
    2332:	9c 89       	ldd	r25, Y+20	; 0x14
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9c 8b       	std	Y+20, r25	; 0x14
    2338:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8b 89       	ldd	r24, Y+19	; 0x13
    233c:	9c 89       	ldd	r25, Y+20	; 0x14
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <start+0x14ee>
    2342:	51 c9       	rjmp	.-3422   	; 0x15e6 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6d 89       	ldd	r22, Y+21	; 0x15
    2346:	7e 89       	ldd	r23, Y+22	; 0x16
    2348:	8f 89       	ldd	r24, Y+23	; 0x17
    234a:	98 8d       	ldd	r25, Y+24	; 0x18
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9c 8b       	std	Y+20, r25	; 0x14
    2356:	8b 8b       	std	Y+19, r24	; 0x13
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	98 8b       	std	Y+16, r25	; 0x10
    235e:	8f 87       	std	Y+15, r24	; 0x0f
    2360:	8f 85       	ldd	r24, Y+15	; 0x0f
    2362:	98 89       	ldd	r25, Y+16	; 0x10
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <start+0x1536>
    2368:	98 8b       	std	Y+16, r25	; 0x10
    236a:	8f 87       	std	Y+15, r24	; 0x0f
    236c:	3c c9       	rjmp	.-3464   	; 0x15e6 <start+0x7b8>
				}
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    236e:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    2372:	fe 01       	movw	r30, r28
    2374:	ef 51       	subi	r30, 0x1F	; 31
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    237a:	fe 01       	movw	r30, r28
    237c:	ef 51       	subi	r30, 0x1F	; 31
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	83 30       	cpi	r24, 0x03	; 3
    2384:	18 f0       	brcs	.+6      	; 0x238c <start+0x155e>
				{
					securityAlarm();
    2386:	0e 94 35 14 	call	0x286a	; 0x286a <securityAlarm>
    238a:	2d c9       	rjmp	.-3494   	; 0x15e6 <start+0x7b8>
				}

				else
				{
					LCD_clearScreen();
    238c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    2390:	8b e8       	ldi	r24, 0x8B	; 139
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e4       	ldi	r25, 0x40	; 64
    239c:	ac e1       	ldi	r26, 0x1C	; 28
    239e:	b5 e4       	ldi	r27, 0x45	; 69
    23a0:	8b 87       	std	Y+11, r24	; 0x0b
    23a2:	9c 87       	std	Y+12, r25	; 0x0c
    23a4:	ad 87       	std	Y+13, r26	; 0x0d
    23a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4a ef       	ldi	r20, 0xFA	; 250
    23b6:	54 e4       	ldi	r21, 0x44	; 68
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	8f 83       	std	Y+7, r24	; 0x07
    23c2:	98 87       	std	Y+8, r25	; 0x08
    23c4:	a9 87       	std	Y+9, r26	; 0x09
    23c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e8       	ldi	r20, 0x80	; 128
    23d6:	5f e3       	ldi	r21, 0x3F	; 63
    23d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23dc:	88 23       	and	r24, r24
    23de:	2c f4       	brge	.+10     	; 0x23ea <start+0x15bc>
		__ticks = 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	3f c0       	rjmp	.+126    	; 0x2468 <start+0x163a>
	else if (__tmp > 65535)
    23ea:	6f 81       	ldd	r22, Y+7	; 0x07
    23ec:	78 85       	ldd	r23, Y+8	; 0x08
    23ee:	89 85       	ldd	r24, Y+9	; 0x09
    23f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	4c f5       	brge	.+82     	; 0x2454 <start+0x1626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	6b 85       	ldd	r22, Y+11	; 0x0b
    2404:	7c 85       	ldd	r23, Y+12	; 0x0c
    2406:	8d 85       	ldd	r24, Y+13	; 0x0d
    2408:	9e 85       	ldd	r25, Y+14	; 0x0e
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 e4       	ldi	r21, 0x41	; 65
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	0f c0       	rjmp	.+30     	; 0x244a <start+0x161c>
    242c:	88 ec       	ldi	r24, 0xC8	; 200
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <start+0x160a>
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	69 f7       	brne	.-38     	; 0x242c <start+0x15fe>
    2452:	c9 c8       	rjmp	.-3694   	; 0x15e6 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	6f 81       	ldd	r22, Y+7	; 0x07
    2456:	78 85       	ldd	r23, Y+8	; 0x08
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	9a 85       	ldd	r25, Y+10	; 0x0a
    245c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <start+0x1646>
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	b4 c8       	rjmp	.-3736   	; 0x15e6 <start+0x7b8>

0000247e <enterPassword>:

/*
 * description: this function will include store the 5 letters that will be stored in password plus confirm letter
 */
void enterPassword (uint8 password[])
{
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	6f 97       	sbiw	r28, 0x1f	; 31
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	9f 8f       	std	Y+31, r25	; 0x1f
    2498:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i;
	LCD_moveCursor(1, 5);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	65 e0       	ldi	r22, 0x05	; 5
    249e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <LCD_moveCursor>

	for (i=0 ; i<6 ;++i)
    24a2:	1d 8e       	std	Y+29, r1	; 0x1d
    24a4:	8b c0       	rjmp	.+278    	; 0x25bc <enterPassword+0x13e>
	{
		while ((KEYPAD_getPressedKey() != 13) && (i == 5));
    24a6:	0e 94 44 19 	call	0x3288	; 0x3288 <KEYPAD_getPressedKey>
    24aa:	8d 30       	cpi	r24, 0x0D	; 13
    24ac:	19 f0       	breq	.+6      	; 0x24b4 <enterPassword+0x36>
    24ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b0:	85 30       	cpi	r24, 0x05	; 5
    24b2:	c9 f3       	breq	.-14     	; 0x24a6 <enterPassword+0x28>

		password[i] = KEYPAD_getPressedKey();
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24be:	8c 01       	movw	r16, r24
    24c0:	02 0f       	add	r16, r18
    24c2:	13 1f       	adc	r17, r19
    24c4:	0e 94 44 19 	call	0x3288	; 0x3288 <KEYPAD_getPressedKey>
    24c8:	f8 01       	movw	r30, r16
    24ca:	80 83       	st	Z, r24
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	aa ef       	ldi	r26, 0xFA	; 250
    24d2:	b3 e4       	ldi	r27, 0x43	; 67
    24d4:	89 8f       	std	Y+25, r24	; 0x19
    24d6:	9a 8f       	std	Y+26, r25	; 0x1a
    24d8:	ab 8f       	std	Y+27, r26	; 0x1b
    24da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	69 8d       	ldd	r22, Y+25	; 0x19
    24de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a ef       	ldi	r20, 0xFA	; 250
    24ea:	54 e4       	ldi	r21, 0x44	; 68
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	8d 8b       	std	Y+21, r24	; 0x15
    24f6:	9e 8b       	std	Y+22, r25	; 0x16
    24f8:	af 8b       	std	Y+23, r26	; 0x17
    24fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24fc:	6d 89       	ldd	r22, Y+21	; 0x15
    24fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <enterPassword+0xa0>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9c 8b       	std	Y+20, r25	; 0x14
    251a:	8b 8b       	std	Y+19, r24	; 0x13
    251c:	3f c0       	rjmp	.+126    	; 0x259c <enterPassword+0x11e>
	else if (__tmp > 65535)
    251e:	6d 89       	ldd	r22, Y+21	; 0x15
    2520:	7e 89       	ldd	r23, Y+22	; 0x16
    2522:	8f 89       	ldd	r24, Y+23	; 0x17
    2524:	98 8d       	ldd	r25, Y+24	; 0x18
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	4c f5       	brge	.+82     	; 0x2588 <enterPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	69 8d       	ldd	r22, Y+25	; 0x19
    2538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9c 8b       	std	Y+20, r25	; 0x14
    255c:	8b 8b       	std	Y+19, r24	; 0x13
    255e:	0f c0       	rjmp	.+30     	; 0x257e <enterPassword+0x100>
    2560:	88 ec       	ldi	r24, 0xC8	; 200
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9a 8b       	std	Y+18, r25	; 0x12
    2566:	89 8b       	std	Y+17, r24	; 0x11
    2568:	89 89       	ldd	r24, Y+17	; 0x11
    256a:	9a 89       	ldd	r25, Y+18	; 0x12
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <enterPassword+0xee>
    2570:	9a 8b       	std	Y+18, r25	; 0x12
    2572:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	9c 8b       	std	Y+20, r25	; 0x14
    257c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	8b 89       	ldd	r24, Y+19	; 0x13
    2580:	9c 89       	ldd	r25, Y+20	; 0x14
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	69 f7       	brne	.-38     	; 0x2560 <enterPassword+0xe2>
    2586:	14 c0       	rjmp	.+40     	; 0x25b0 <enterPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9c 8b       	std	Y+20, r25	; 0x14
    259a:	8b 8b       	std	Y+19, r24	; 0x13
    259c:	8b 89       	ldd	r24, Y+19	; 0x13
    259e:	9c 89       	ldd	r25, Y+20	; 0x14
    25a0:	98 8b       	std	Y+16, r25	; 0x10
    25a2:	8f 87       	std	Y+15, r24	; 0x0f
    25a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a6:	98 89       	ldd	r25, Y+16	; 0x10
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <enterPassword+0x12a>
    25ac:	98 8b       	std	Y+16, r25	; 0x10
    25ae:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
    25b0:	8a e2       	ldi	r24, 0x2A	; 42
    25b2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <LCD_displayCharacter>
void enterPassword (uint8 password[])
{
	uint8 i;
	LCD_moveCursor(1, 5);

	for (i=0 ; i<6 ;++i)
    25b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b8:	8f 5f       	subi	r24, 0xFF	; 255
    25ba:	8d 8f       	std	Y+29, r24	; 0x1d
    25bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25be:	86 30       	cpi	r24, 0x06	; 6
    25c0:	08 f4       	brcc	.+2      	; 0x25c4 <enterPassword+0x146>
    25c2:	71 cf       	rjmp	.-286    	; 0x24a6 <enterPassword+0x28>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	aa ef       	ldi	r26, 0xFA	; 250
    25ca:	b3 e4       	ldi	r27, 0x43	; 67
    25cc:	8b 87       	std	Y+11, r24	; 0x0b
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	ad 87       	std	Y+13, r26	; 0x0d
    25d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a ef       	ldi	r20, 0xFA	; 250
    25e2:	54 e4       	ldi	r21, 0x44	; 68
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	98 87       	std	Y+8, r25	; 0x08
    25f0:	a9 87       	std	Y+9, r26	; 0x09
    25f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <enterPassword+0x198>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <enterPassword+0x216>
	else if (__tmp > 65535)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <enterPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <enterPassword+0x1f8>
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <enterPassword+0x1e6>
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <enterPassword+0x1da>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <enterPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <enterPassword+0x222>
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
	}

	_delay_ms (KEYPAD_DELAY);
}
    26a8:	6f 96       	adiw	r28, 0x1f	; 31
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	08 95       	ret

000026be <sendPassword>:
/*
 * description send the password byte after byte to the Control_ECU MC to be checked
 */
void sendPassword (uint8 password[])
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	61 97       	sbiw	r28, 0x11	; 17
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	99 8b       	std	Y+17, r25	; 0x11
    26d4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    26d6:	1f 86       	std	Y+15, r1	; 0x0f
    26d8:	0e c0       	rjmp	.+28     	; 0x26f6 <sendPassword+0x38>
	{
		UART_sendByte (password[i]);
    26da:	8f 85       	ldd	r24, Y+15	; 0x0f
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	88 89       	ldd	r24, Y+16	; 0x10
    26e2:	99 89       	ldd	r25, Y+17	; 0x11
    26e4:	fc 01       	movw	r30, r24
    26e6:	e2 0f       	add	r30, r18
    26e8:	f3 1f       	adc	r31, r19
    26ea:	80 81       	ld	r24, Z
    26ec:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
 */
void sendPassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    26f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	8f 87       	std	Y+15, r24	; 0x0f
    26f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f8:	85 30       	cpi	r24, 0x05	; 5
    26fa:	78 f3       	brcs	.-34     	; 0x26da <sendPassword+0x1c>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a8 e4       	ldi	r26, 0x48	; 72
    2702:	b2 e4       	ldi	r27, 0x42	; 66
    2704:	8b 87       	std	Y+11, r24	; 0x0b
    2706:	9c 87       	std	Y+12, r25	; 0x0c
    2708:	ad 87       	std	Y+13, r26	; 0x0d
    270a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270c:	6b 85       	ldd	r22, Y+11	; 0x0b
    270e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2710:	8d 85       	ldd	r24, Y+13	; 0x0d
    2712:	9e 85       	ldd	r25, Y+14	; 0x0e
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a ef       	ldi	r20, 0xFA	; 250
    271a:	54 e4       	ldi	r21, 0x44	; 68
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8f 83       	std	Y+7, r24	; 0x07
    2726:	98 87       	std	Y+8, r25	; 0x08
    2728:	a9 87       	std	Y+9, r26	; 0x09
    272a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <sendPassword+0x90>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <sendPassword+0x10e>
	else if (__tmp > 65535)
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	4c f5       	brge	.+82     	; 0x27b8 <sendPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <sendPassword+0xf0>
    2790:	88 ec       	ldi	r24, 0xC8	; 200
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <sendPassword+0xde>
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f7       	brne	.-38     	; 0x2790 <sendPassword+0xd2>
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <sendPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <sendPassword+0x11a>
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (password[i]);
	}
	_delay_ms (UART_DELAY);
}
    27e0:	61 96       	adiw	r28, 0x11	; 17
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <optionsDisplay>:
/*
 * this function will display the procedures in case of opening the door on the LCD
 */
void optionsDisplay (void)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    27fa:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "- :Change Pass");
    27fe:	2a ed       	ldi	r18, 0xDA	; 218
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	a9 01       	movw	r20, r18
    2808:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    280c:	29 ee       	ldi	r18, 0xE9	; 233
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	a9 01       	movw	r20, r18
    2816:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <LCD_displayStringRowColumn>
}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <openDoor>:

void openDoor (void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2828:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
	LCD_displayString("Door Unlocking.");
    282c:	86 ef       	ldi	r24, 0xF6	; 246
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>

	wait(15);//wait 15 seconds
    2834:	8f e0       	ldi	r24, 0x0F	; 15
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 60 14 	call	0x28c0	; 0x28c0 <wait>

	LCD_clearScreen();
    283c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
	LCD_displayString("Door Opened");
    2840:	86 e0       	ldi	r24, 0x06	; 6
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>

	wait(3);//wait 3 seconds
    2848:	83 e0       	ldi	r24, 0x03	; 3
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <wait>

	LCD_clearScreen();
    2850:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
	LCD_displayString("Door is Locking.");
    2854:	82 e1       	ldi	r24, 0x12	; 18
    2856:	91 e0       	ldi	r25, 0x01	; 1
    2858:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
	wait(15);//wait 15 seconds
    285c:	8f e0       	ldi	r24, 0x0F	; 15
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 60 14 	call	0x28c0	; 0x28c0 <wait>
}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <securityAlarm>:

void securityAlarm (void)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    2872:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <LCD_clearScreen>
	LCD_displayString("Security Alarm....");
    2876:	83 e2       	ldi	r24, 0x23	; 35
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
	wait(60);//wait for 1 minute
    287e:	8c e3       	ldi	r24, 0x3C	; 60
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 60 14 	call	0x28c0	; 0x28c0 <wait>
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <timer_tick>:
/* Function Description
 * call back function that increase the tick every call*/
void timer_tick(void){
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2894:	80 91 4c 02 	lds	r24, 0x024C
    2898:	90 91 4d 02 	lds	r25, 0x024D
    289c:	a0 91 4e 02 	lds	r26, 0x024E
    28a0:	b0 91 4f 02 	lds	r27, 0x024F
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	a1 1d       	adc	r26, r1
    28a8:	b1 1d       	adc	r27, r1
    28aa:	80 93 4c 02 	sts	0x024C, r24
    28ae:	90 93 4d 02 	sts	0x024D, r25
    28b2:	a0 93 4e 02 	sts	0x024E, r26
    28b6:	b0 93 4f 02 	sts	0x024F, r27
}
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <wait>:
/* Function Description
 * wait until specified time in seconds */
void wait(uint16 seconds){
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	61 97       	sbiw	r28, 0x11	; 17
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	9c 87       	std	Y+12, r25	; 0x0c
    28d6:	8b 87       	std	Y+11, r24	; 0x0b
	g_tick=0;
    28d8:	10 92 4c 02 	sts	0x024C, r1
    28dc:	10 92 4d 02 	sts	0x024D, r1
    28e0:	10 92 4e 02 	sts	0x024E, r1
    28e4:	10 92 4f 02 	sts	0x024F, r1
	uint32 counter=seconds;/*the seconds required to be waited */
    28e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ec:	cc 01       	movw	r24, r24
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	ab 83       	std	Y+3, r26	; 0x03
    28f8:	bc 83       	std	Y+4, r27	; 0x04
	Timer1_ConfigType timerS={0,7813,F_1024,CTC};
    28fa:	ce 01       	movw	r24, r28
    28fc:	05 96       	adiw	r24, 0x05	; 5
    28fe:	9e 87       	std	Y+14, r25	; 0x0e
    2900:	8d 87       	std	Y+13, r24	; 0x0d
    2902:	e5 e4       	ldi	r30, 0x45	; 69
    2904:	f2 e0       	ldi	r31, 0x02	; 2
    2906:	f8 8b       	std	Y+16, r31	; 0x10
    2908:	ef 87       	std	Y+15, r30	; 0x0f
    290a:	f6 e0       	ldi	r31, 0x06	; 6
    290c:	f9 8b       	std	Y+17, r31	; 0x11
    290e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2910:	f8 89       	ldd	r31, Y+16	; 0x10
    2912:	00 80       	ld	r0, Z
    2914:	8f 85       	ldd	r24, Y+15	; 0x0f
    2916:	98 89       	ldd	r25, Y+16	; 0x10
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
    291e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2920:	fe 85       	ldd	r31, Y+14	; 0x0e
    2922:	00 82       	st	Z, r0
    2924:	8d 85       	ldd	r24, Y+13	; 0x0d
    2926:	9e 85       	ldd	r25, Y+14	; 0x0e
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	9e 87       	std	Y+14, r25	; 0x0e
    292c:	8d 87       	std	Y+13, r24	; 0x0d
    292e:	99 89       	ldd	r25, Y+17	; 0x11
    2930:	91 50       	subi	r25, 0x01	; 1
    2932:	99 8b       	std	Y+17, r25	; 0x11
    2934:	e9 89       	ldd	r30, Y+17	; 0x11
    2936:	ee 23       	and	r30, r30
    2938:	51 f7       	brne	.-44     	; 0x290e <wait+0x4e>
	Timer1_init(&timerS);
    293a:	ce 01       	movw	r24, r28
    293c:	05 96       	adiw	r24, 0x05	; 5
    293e:	0e 94 77 15 	call	0x2aee	; 0x2aee <Timer1_init>
	Timer1_setCallBack(timer_tick);
    2942:	86 e4       	ldi	r24, 0x46	; 70
    2944:	94 e1       	ldi	r25, 0x14	; 20
    2946:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <Timer1_setCallBack>
	while(g_tick<counter);
    294a:	20 91 4c 02 	lds	r18, 0x024C
    294e:	30 91 4d 02 	lds	r19, 0x024D
    2952:	40 91 4e 02 	lds	r20, 0x024E
    2956:	50 91 4f 02 	lds	r21, 0x024F
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	ab 81       	ldd	r26, Y+3	; 0x03
    2960:	bc 81       	ldd	r27, Y+4	; 0x04
    2962:	28 17       	cp	r18, r24
    2964:	39 07       	cpc	r19, r25
    2966:	4a 07       	cpc	r20, r26
    2968:	5b 07       	cpc	r21, r27
    296a:	78 f3       	brcs	.-34     	; 0x294a <wait+0x8a>
	Timer1_deInit();
    296c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <Timer1_deInit>
}
    2970:	61 96       	adiw	r28, 0x11	; 17
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <main>:
/*******************************************************************************
 *                              MAIN Function                                  *
 *******************************************************************************/

int main()
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
	start();
    298a:	0e 94 17 07 	call	0xe2e	; 0xe2e <start>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
}
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <__vector_9>:
#include "common_macros.h"


static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect){
    2998:	1f 92       	push	r1
    299a:	0f 92       	push	r0
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	0f 92       	push	r0
    29a0:	11 24       	eor	r1, r1
    29a2:	2f 93       	push	r18
    29a4:	3f 93       	push	r19
    29a6:	4f 93       	push	r20
    29a8:	5f 93       	push	r21
    29aa:	6f 93       	push	r22
    29ac:	7f 93       	push	r23
    29ae:	8f 93       	push	r24
    29b0:	9f 93       	push	r25
    29b2:	af 93       	push	r26
    29b4:	bf 93       	push	r27
    29b6:	ef 93       	push	r30
    29b8:	ff 93       	push	r31
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    29c2:	80 91 50 02 	lds	r24, 0x0250
    29c6:	90 91 51 02 	lds	r25, 0x0251
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	29 f0       	breq	.+10     	; 0x29d8 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    29ce:	e0 91 50 02 	lds	r30, 0x0250
    29d2:	f0 91 51 02 	lds	r31, 0x0251
    29d6:	09 95       	icall
	}
}
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	ff 91       	pop	r31
    29de:	ef 91       	pop	r30
    29e0:	bf 91       	pop	r27
    29e2:	af 91       	pop	r26
    29e4:	9f 91       	pop	r25
    29e6:	8f 91       	pop	r24
    29e8:	7f 91       	pop	r23
    29ea:	6f 91       	pop	r22
    29ec:	5f 91       	pop	r21
    29ee:	4f 91       	pop	r20
    29f0:	3f 91       	pop	r19
    29f2:	2f 91       	pop	r18
    29f4:	0f 90       	pop	r0
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	0f 90       	pop	r0
    29fa:	1f 90       	pop	r1
    29fc:	18 95       	reti

000029fe <__vector_7>:

ISR(TIMER1_COMPA_vect){
    29fe:	1f 92       	push	r1
    2a00:	0f 92       	push	r0
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	0f 92       	push	r0
    2a06:	11 24       	eor	r1, r1
    2a08:	2f 93       	push	r18
    2a0a:	3f 93       	push	r19
    2a0c:	4f 93       	push	r20
    2a0e:	5f 93       	push	r21
    2a10:	6f 93       	push	r22
    2a12:	7f 93       	push	r23
    2a14:	8f 93       	push	r24
    2a16:	9f 93       	push	r25
    2a18:	af 93       	push	r26
    2a1a:	bf 93       	push	r27
    2a1c:	ef 93       	push	r30
    2a1e:	ff 93       	push	r31
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a28:	80 91 50 02 	lds	r24, 0x0250
    2a2c:	90 91 51 02 	lds	r25, 0x0251
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	29 f0       	breq	.+10     	; 0x2a3e <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    2a34:	e0 91 50 02 	lds	r30, 0x0250
    2a38:	f0 91 51 02 	lds	r31, 0x0251
    2a3c:	09 95       	icall
	}
}
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	ff 91       	pop	r31
    2a44:	ef 91       	pop	r30
    2a46:	bf 91       	pop	r27
    2a48:	af 91       	pop	r26
    2a4a:	9f 91       	pop	r25
    2a4c:	8f 91       	pop	r24
    2a4e:	7f 91       	pop	r23
    2a50:	6f 91       	pop	r22
    2a52:	5f 91       	pop	r21
    2a54:	4f 91       	pop	r20
    2a56:	3f 91       	pop	r19
    2a58:	2f 91       	pop	r18
    2a5a:	0f 90       	pop	r0
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	0f 90       	pop	r0
    2a60:	1f 90       	pop	r1
    2a62:	18 95       	reti

00002a64 <PWM_Timer0_Init>:

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	0f 92       	push	r0
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    2a74:	e2 e5       	ldi	r30, 0x52	; 82
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	10 82       	st	Z, r1

	OCR0 = ((float)set_duty_cycle/100) * 255;
    2a7a:	0c e5       	ldi	r16, 0x5C	; 92
    2a7c:	10 e0       	ldi	r17, 0x00	; 0
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	bc 01       	movw	r22, r24
    2a96:	cd 01       	movw	r24, r26
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	48 ec       	ldi	r20, 0xC8	; 200
    2a9e:	52 e4       	ldi	r21, 0x42	; 66
    2aa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	53 e4       	ldi	r21, 0x43	; 67
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	f8 01       	movw	r30, r16
    2aca:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    2acc:	a7 e3       	ldi	r26, 0x37	; 55
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e7 e3       	ldi	r30, 0x37	; 55
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 60       	ori	r24, 0x08	; 8
    2ad8:	8c 93       	st	X, r24
	/* Configure timer control register
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2ada:	e3 e5       	ldi	r30, 0x53	; 83
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	8a e6       	ldi	r24, 0x6A	; 106
    2ae0:	80 83       	st	Z, r24
}
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	08 95       	ret

00002aee <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <Timer1_init+0x6>
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A =0;
    2afc:	ef e4       	ldi	r30, 0x4F	; 79
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	10 82       	st	Z, r1
	SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    2b02:	af e4       	ldi	r26, 0x4F	; 79
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	ef e4       	ldi	r30, 0x4F	; 79
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 60       	ori	r24, 0x08	; 8
    2b0e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    2b10:	af e4       	ldi	r26, 0x4F	; 79
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	ef e4       	ldi	r30, 0x4F	; 79
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	84 60       	ori	r24, 0x04	; 4
    2b1c:	8c 93       	st	X, r24
	TCCR1B = Config_Ptr->prescaler;
    2b1e:	ae e4       	ldi	r26, 0x4E	; 78
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e9 81       	ldd	r30, Y+1	; 0x01
    2b24:	fa 81       	ldd	r31, Y+2	; 0x02
    2b26:	84 81       	ldd	r24, Z+4	; 0x04
    2b28:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    2b2a:	ac e4       	ldi	r26, 0x4C	; 76
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b30:	fa 81       	ldd	r31, Y+2	; 0x02
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	11 96       	adiw	r26, 0x01	; 1
    2b38:	9c 93       	st	X, r25
    2b3a:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == Normal) {
    2b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b40:	85 81       	ldd	r24, Z+5	; 0x05
    2b42:	88 23       	and	r24, r24
    2b44:	79 f4       	brne	.+30     	; 0x2b64 <Timer1_init+0x76>
		SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    2b46:	a9 e5       	ldi	r26, 0x59	; 89
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e9 e5       	ldi	r30, 0x59	; 89
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	84 60       	ori	r24, 0x04	; 4
    2b52:	8c 93       	st	X, r24
		SET_BIT(TIFR,TOV1);
    2b54:	a8 e5       	ldi	r26, 0x58	; 88
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e8 e5       	ldi	r30, 0x58	; 88
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	84 60       	ori	r24, 0x04	; 4
    2b60:	8c 93       	st	X, r24
    2b62:	23 c0       	rjmp	.+70     	; 0x2baa <Timer1_init+0xbc>

	} else if (Config_Ptr->mode == CTC) {
    2b64:	e9 81       	ldd	r30, Y+1	; 0x01
    2b66:	fa 81       	ldd	r31, Y+2	; 0x02
    2b68:	85 81       	ldd	r24, Z+5	; 0x05
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	f1 f4       	brne	.+60     	; 0x2baa <Timer1_init+0xbc>
		SET_BIT(TCCR1B, WGM12);
    2b6e:	ae e4       	ldi	r26, 0x4E	; 78
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ee e4       	ldi	r30, 0x4E	; 78
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	88 60       	ori	r24, 0x08	; 8
    2b7a:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
    2b7c:	aa e4       	ldi	r26, 0x4A	; 74
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e9 81       	ldd	r30, Y+1	; 0x01
    2b82:	fa 81       	ldd	r31, Y+2	; 0x02
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	11 96       	adiw	r26, 0x01	; 1
    2b8a:	9c 93       	st	X, r25
    2b8c:	8e 93       	st	-X, r24
		SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    2b8e:	a9 e5       	ldi	r26, 0x59	; 89
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e9 e5       	ldi	r30, 0x59	; 89
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	80 61       	ori	r24, 0x10	; 16
    2b9a:	8c 93       	st	X, r24
		SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    2b9c:	a8 e5       	ldi	r26, 0x58	; 88
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e8 e5       	ldi	r30, 0x58	; 88
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 61       	ori	r24, 0x10	; 16
    2ba8:	8c 93       	st	X, r24
	}
}
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <Timer1_deInit>:
void Timer1_deInit(void){
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0xF8;
    2bbc:	ee e4       	ldi	r30, 0x4E	; 78
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	88 ef       	ldi	r24, 0xF8	; 248
    2bc2:	80 83       	st	Z, r24
	OCR1A = 0;
    2bc4:	ea e4       	ldi	r30, 0x4A	; 74
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	11 82       	std	Z+1, r1	; 0x01
    2bca:	10 82       	st	Z, r1
	TIMSK &= 0xE3;
    2bcc:	a9 e5       	ldi	r26, 0x59	; 89
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e9 e5       	ldi	r30, 0x59	; 89
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	83 7e       	andi	r24, 0xE3	; 227
    2bd8:	8c 93       	st	X, r24
	TCNT1 = 0;
    2bda:	ec e4       	ldi	r30, 0x4C	; 76
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	11 82       	std	Z+1, r1	; 0x01
    2be0:	10 82       	st	Z, r1

}
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <Timer1_setCallBack+0x6>
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	90 93 51 02 	sts	0x0251, r25
    2bfe:	80 93 50 02 	sts	0x0250, r24
}
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <GPIO_setupPinDirection+0x6>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <GPIO_setupPinDirection+0x8>
    2c14:	0f 92       	push	r0
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	6a 83       	std	Y+2, r22	; 0x02
    2c1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	88 30       	cpi	r24, 0x08	; 8
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <GPIO_setupPinDirection+0x1c>
    2c26:	d5 c0       	rjmp	.+426    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	08 f0       	brcs	.+2      	; 0x2c30 <GPIO_setupPinDirection+0x24>
    2c2e:	d1 c0       	rjmp	.+418    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	3d 83       	std	Y+5, r19	; 0x05
    2c38:	2c 83       	std	Y+4, r18	; 0x04
    2c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	91 05       	cpc	r25, r1
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <GPIO_setupPinDirection+0x3a>
    2c44:	43 c0       	rjmp	.+134    	; 0x2ccc <GPIO_setupPinDirection+0xc0>
    2c46:	2c 81       	ldd	r18, Y+4	; 0x04
    2c48:	3d 81       	ldd	r19, Y+5	; 0x05
    2c4a:	22 30       	cpi	r18, 0x02	; 2
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <GPIO_setupPinDirection+0x4e>
    2c50:	8c 81       	ldd	r24, Y+4	; 0x04
    2c52:	9d 81       	ldd	r25, Y+5	; 0x05
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	71 f0       	breq	.+28     	; 0x2c74 <GPIO_setupPinDirection+0x68>
    2c58:	bc c0       	rjmp	.+376    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
    2c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c5e:	22 30       	cpi	r18, 0x02	; 2
    2c60:	31 05       	cpc	r19, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <GPIO_setupPinDirection+0x5a>
    2c64:	5f c0       	rjmp	.+190    	; 0x2d24 <GPIO_setupPinDirection+0x118>
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
    2c68:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6a:	83 30       	cpi	r24, 0x03	; 3
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <GPIO_setupPinDirection+0x66>
    2c70:	85 c0       	rjmp	.+266    	; 0x2d7c <GPIO_setupPinDirection+0x170>
    2c72:	af c0       	rjmp	.+350    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	a1 f4       	brne	.+40     	; 0x2ca2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2c7a:	aa e3       	ldi	r26, 0x3A	; 58
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	ea e3       	ldi	r30, 0x3A	; 58
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	48 2f       	mov	r20, r24
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	02 2e       	mov	r0, r18
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <GPIO_setupPinDirection+0x8c>
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	0a 94       	dec	r0
    2c9a:	e2 f7       	brpl	.-8      	; 0x2c94 <GPIO_setupPinDirection+0x88>
    2c9c:	84 2b       	or	r24, r20
    2c9e:	8c 93       	st	X, r24
    2ca0:	98 c0       	rjmp	.+304    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2ca2:	aa e3       	ldi	r26, 0x3A	; 58
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	ea e3       	ldi	r30, 0x3A	; 58
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	48 2f       	mov	r20, r24
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	02 2e       	mov	r0, r18
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <GPIO_setupPinDirection+0xb4>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	0a 94       	dec	r0
    2cc2:	e2 f7       	brpl	.-8      	; 0x2cbc <GPIO_setupPinDirection+0xb0>
    2cc4:	80 95       	com	r24
    2cc6:	84 23       	and	r24, r20
    2cc8:	8c 93       	st	X, r24
    2cca:	83 c0       	rjmp	.+262    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	81 30       	cpi	r24, 0x01	; 1
    2cd0:	a1 f4       	brne	.+40     	; 0x2cfa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2cd2:	a7 e3       	ldi	r26, 0x37	; 55
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e7 e3       	ldi	r30, 0x37	; 55
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	48 2f       	mov	r20, r24
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	02 2e       	mov	r0, r18
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <GPIO_setupPinDirection+0xe4>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	0a 94       	dec	r0
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <GPIO_setupPinDirection+0xe0>
    2cf4:	84 2b       	or	r24, r20
    2cf6:	8c 93       	st	X, r24
    2cf8:	6c c0       	rjmp	.+216    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2cfa:	a7 e3       	ldi	r26, 0x37	; 55
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e7 e3       	ldi	r30, 0x37	; 55
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <GPIO_setupPinDirection+0x10c>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <GPIO_setupPinDirection+0x108>
    2d1c:	80 95       	com	r24
    2d1e:	84 23       	and	r24, r20
    2d20:	8c 93       	st	X, r24
    2d22:	57 c0       	rjmp	.+174    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	81 30       	cpi	r24, 0x01	; 1
    2d28:	a1 f4       	brne	.+40     	; 0x2d52 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2d2a:	a4 e3       	ldi	r26, 0x34	; 52
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e4 e3       	ldi	r30, 0x34	; 52
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	48 2f       	mov	r20, r24
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	02 2e       	mov	r0, r18
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <GPIO_setupPinDirection+0x13c>
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	0a 94       	dec	r0
    2d4a:	e2 f7       	brpl	.-8      	; 0x2d44 <GPIO_setupPinDirection+0x138>
    2d4c:	84 2b       	or	r24, r20
    2d4e:	8c 93       	st	X, r24
    2d50:	40 c0       	rjmp	.+128    	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2d52:	a4 e3       	ldi	r26, 0x34	; 52
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e4 e3       	ldi	r30, 0x34	; 52
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	48 2f       	mov	r20, r24
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	28 2f       	mov	r18, r24
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	02 2e       	mov	r0, r18
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <GPIO_setupPinDirection+0x164>
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	0a 94       	dec	r0
    2d72:	e2 f7       	brpl	.-8      	; 0x2d6c <GPIO_setupPinDirection+0x160>
    2d74:	80 95       	com	r24
    2d76:	84 23       	and	r24, r20
    2d78:	8c 93       	st	X, r24
    2d7a:	2b c0       	rjmp	.+86     	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	a1 f4       	brne	.+40     	; 0x2daa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2d82:	a1 e3       	ldi	r26, 0x31	; 49
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e1 e3       	ldi	r30, 0x31	; 49
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	48 2f       	mov	r20, r24
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	28 2f       	mov	r18, r24
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	02 2e       	mov	r0, r18
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <GPIO_setupPinDirection+0x194>
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	0a 94       	dec	r0
    2da2:	e2 f7       	brpl	.-8      	; 0x2d9c <GPIO_setupPinDirection+0x190>
    2da4:	84 2b       	or	r24, r20
    2da6:	8c 93       	st	X, r24
    2da8:	14 c0       	rjmp	.+40     	; 0x2dd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2daa:	a1 e3       	ldi	r26, 0x31	; 49
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e1 e3       	ldi	r30, 0x31	; 49
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	48 2f       	mov	r20, r24
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	28 2f       	mov	r18, r24
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	02 2e       	mov	r0, r18
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <GPIO_setupPinDirection+0x1bc>
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	0a 94       	dec	r0
    2dca:	e2 f7       	brpl	.-8      	; 0x2dc4 <GPIO_setupPinDirection+0x1b8>
    2dcc:	80 95       	com	r24
    2dce:	84 23       	and	r24, r20
    2dd0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <GPIO_writePin+0x6>
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <GPIO_writePin+0x8>
    2dea:	0f 92       	push	r0
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	6a 83       	std	Y+2, r22	; 0x02
    2df4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	88 30       	cpi	r24, 0x08	; 8
    2dfa:	08 f0       	brcs	.+2      	; 0x2dfe <GPIO_writePin+0x1c>
    2dfc:	d5 c0       	rjmp	.+426    	; 0x2fa8 <GPIO_writePin+0x1c6>
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	84 30       	cpi	r24, 0x04	; 4
    2e02:	08 f0       	brcs	.+2      	; 0x2e06 <GPIO_writePin+0x24>
    2e04:	d1 c0       	rjmp	.+418    	; 0x2fa8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	3d 83       	std	Y+5, r19	; 0x05
    2e0e:	2c 83       	std	Y+4, r18	; 0x04
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	9d 81       	ldd	r25, Y+5	; 0x05
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	91 05       	cpc	r25, r1
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <GPIO_writePin+0x3a>
    2e1a:	43 c0       	rjmp	.+134    	; 0x2ea2 <GPIO_writePin+0xc0>
    2e1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e20:	22 30       	cpi	r18, 0x02	; 2
    2e22:	31 05       	cpc	r19, r1
    2e24:	2c f4       	brge	.+10     	; 0x2e30 <GPIO_writePin+0x4e>
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	71 f0       	breq	.+28     	; 0x2e4a <GPIO_writePin+0x68>
    2e2e:	bc c0       	rjmp	.+376    	; 0x2fa8 <GPIO_writePin+0x1c6>
    2e30:	2c 81       	ldd	r18, Y+4	; 0x04
    2e32:	3d 81       	ldd	r19, Y+5	; 0x05
    2e34:	22 30       	cpi	r18, 0x02	; 2
    2e36:	31 05       	cpc	r19, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <GPIO_writePin+0x5a>
    2e3a:	5f c0       	rjmp	.+190    	; 0x2efa <GPIO_writePin+0x118>
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	91 05       	cpc	r25, r1
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <GPIO_writePin+0x66>
    2e46:	85 c0       	rjmp	.+266    	; 0x2f52 <GPIO_writePin+0x170>
    2e48:	af c0       	rjmp	.+350    	; 0x2fa8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	a1 f4       	brne	.+40     	; 0x2e78 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2e50:	ab e3       	ldi	r26, 0x3B	; 59
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	eb e3       	ldi	r30, 0x3B	; 59
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	48 2f       	mov	r20, r24
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	02 2e       	mov	r0, r18
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <GPIO_writePin+0x8c>
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	0a 94       	dec	r0
    2e70:	e2 f7       	brpl	.-8      	; 0x2e6a <GPIO_writePin+0x88>
    2e72:	84 2b       	or	r24, r20
    2e74:	8c 93       	st	X, r24
    2e76:	98 c0       	rjmp	.+304    	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2e78:	ab e3       	ldi	r26, 0x3B	; 59
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	eb e3       	ldi	r30, 0x3B	; 59
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	48 2f       	mov	r20, r24
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	02 2e       	mov	r0, r18
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <GPIO_writePin+0xb4>
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	0a 94       	dec	r0
    2e98:	e2 f7       	brpl	.-8      	; 0x2e92 <GPIO_writePin+0xb0>
    2e9a:	80 95       	com	r24
    2e9c:	84 23       	and	r24, r20
    2e9e:	8c 93       	st	X, r24
    2ea0:	83 c0       	rjmp	.+262    	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	a1 f4       	brne	.+40     	; 0x2ed0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2ea8:	a8 e3       	ldi	r26, 0x38	; 56
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e8 e3       	ldi	r30, 0x38	; 56
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	48 2f       	mov	r20, r24
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	02 2e       	mov	r0, r18
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <GPIO_writePin+0xe4>
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	0a 94       	dec	r0
    2ec8:	e2 f7       	brpl	.-8      	; 0x2ec2 <GPIO_writePin+0xe0>
    2eca:	84 2b       	or	r24, r20
    2ecc:	8c 93       	st	X, r24
    2ece:	6c c0       	rjmp	.+216    	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2ed0:	a8 e3       	ldi	r26, 0x38	; 56
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e8 e3       	ldi	r30, 0x38	; 56
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	48 2f       	mov	r20, r24
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	02 2e       	mov	r0, r18
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <GPIO_writePin+0x10c>
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	0a 94       	dec	r0
    2ef0:	e2 f7       	brpl	.-8      	; 0x2eea <GPIO_writePin+0x108>
    2ef2:	80 95       	com	r24
    2ef4:	84 23       	and	r24, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	57 c0       	rjmp	.+174    	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	81 30       	cpi	r24, 0x01	; 1
    2efe:	a1 f4       	brne	.+40     	; 0x2f28 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2f00:	a5 e3       	ldi	r26, 0x35	; 53
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e5 e3       	ldi	r30, 0x35	; 53
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	48 2f       	mov	r20, r24
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	02 2e       	mov	r0, r18
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <GPIO_writePin+0x13c>
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	0a 94       	dec	r0
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <GPIO_writePin+0x138>
    2f22:	84 2b       	or	r24, r20
    2f24:	8c 93       	st	X, r24
    2f26:	40 c0       	rjmp	.+128    	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2f28:	a5 e3       	ldi	r26, 0x35	; 53
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	e5 e3       	ldi	r30, 0x35	; 53
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	48 2f       	mov	r20, r24
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	02 2e       	mov	r0, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <GPIO_writePin+0x164>
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	0a 94       	dec	r0
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <GPIO_writePin+0x160>
    2f4a:	80 95       	com	r24
    2f4c:	84 23       	and	r24, r20
    2f4e:	8c 93       	st	X, r24
    2f50:	2b c0       	rjmp	.+86     	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	81 30       	cpi	r24, 0x01	; 1
    2f56:	a1 f4       	brne	.+40     	; 0x2f80 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2f58:	a2 e3       	ldi	r26, 0x32	; 50
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e2 e3       	ldi	r30, 0x32	; 50
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	48 2f       	mov	r20, r24
    2f64:	8a 81       	ldd	r24, Y+2	; 0x02
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	02 2e       	mov	r0, r18
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <GPIO_writePin+0x194>
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	0a 94       	dec	r0
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <GPIO_writePin+0x190>
    2f7a:	84 2b       	or	r24, r20
    2f7c:	8c 93       	st	X, r24
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2f80:	a2 e3       	ldi	r26, 0x32	; 50
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e2 e3       	ldi	r30, 0x32	; 50
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	48 2f       	mov	r20, r24
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	02 2e       	mov	r0, r18
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <GPIO_writePin+0x1bc>
    2f9a:	88 0f       	add	r24, r24
    2f9c:	99 1f       	adc	r25, r25
    2f9e:	0a 94       	dec	r0
    2fa0:	e2 f7       	brpl	.-8      	; 0x2f9a <GPIO_writePin+0x1b8>
    2fa2:	80 95       	com	r24
    2fa4:	84 23       	and	r24, r20
    2fa6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <GPIO_readPin+0x6>
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <GPIO_readPin+0x8>
    2fc0:	0f 92       	push	r0
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	8a 83       	std	Y+2, r24	; 0x02
    2fc8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2fca:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	88 30       	cpi	r24, 0x08	; 8
    2fd0:	08 f0       	brcs	.+2      	; 0x2fd4 <GPIO_readPin+0x1c>
    2fd2:	84 c0       	rjmp	.+264    	; 0x30dc <GPIO_readPin+0x124>
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	84 30       	cpi	r24, 0x04	; 4
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <GPIO_readPin+0x24>
    2fda:	80 c0       	rjmp	.+256    	; 0x30dc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	3d 83       	std	Y+5, r19	; 0x05
    2fe4:	2c 83       	std	Y+4, r18	; 0x04
    2fe6:	4c 81       	ldd	r20, Y+4	; 0x04
    2fe8:	5d 81       	ldd	r21, Y+5	; 0x05
    2fea:	41 30       	cpi	r20, 0x01	; 1
    2fec:	51 05       	cpc	r21, r1
    2fee:	79 f1       	breq	.+94     	; 0x304e <GPIO_readPin+0x96>
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff4:	82 30       	cpi	r24, 0x02	; 2
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	34 f4       	brge	.+12     	; 0x3006 <GPIO_readPin+0x4e>
    2ffa:	2c 81       	ldd	r18, Y+4	; 0x04
    2ffc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ffe:	21 15       	cp	r18, r1
    3000:	31 05       	cpc	r19, r1
    3002:	69 f0       	breq	.+26     	; 0x301e <GPIO_readPin+0x66>
    3004:	6b c0       	rjmp	.+214    	; 0x30dc <GPIO_readPin+0x124>
    3006:	4c 81       	ldd	r20, Y+4	; 0x04
    3008:	5d 81       	ldd	r21, Y+5	; 0x05
    300a:	42 30       	cpi	r20, 0x02	; 2
    300c:	51 05       	cpc	r21, r1
    300e:	b9 f1       	breq	.+110    	; 0x307e <GPIO_readPin+0xc6>
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
    3012:	9d 81       	ldd	r25, Y+5	; 0x05
    3014:	83 30       	cpi	r24, 0x03	; 3
    3016:	91 05       	cpc	r25, r1
    3018:	09 f4       	brne	.+2      	; 0x301c <GPIO_readPin+0x64>
    301a:	49 c0       	rjmp	.+146    	; 0x30ae <GPIO_readPin+0xf6>
    301c:	5f c0       	rjmp	.+190    	; 0x30dc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    301e:	e9 e3       	ldi	r30, 0x39	; 57
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	88 2f       	mov	r24, r24
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	a9 01       	movw	r20, r18
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <GPIO_readPin+0x7e>
    3032:	55 95       	asr	r21
    3034:	47 95       	ror	r20
    3036:	8a 95       	dec	r24
    3038:	e2 f7       	brpl	.-8      	; 0x3032 <GPIO_readPin+0x7a>
    303a:	ca 01       	movw	r24, r20
    303c:	81 70       	andi	r24, 0x01	; 1
    303e:	90 70       	andi	r25, 0x00	; 0
    3040:	88 23       	and	r24, r24
    3042:	19 f0       	breq	.+6      	; 0x304a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	49 c0       	rjmp	.+146    	; 0x30dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    304a:	19 82       	std	Y+1, r1	; 0x01
    304c:	47 c0       	rjmp	.+142    	; 0x30dc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    304e:	e6 e3       	ldi	r30, 0x36	; 54
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	88 2f       	mov	r24, r24
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	a9 01       	movw	r20, r18
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <GPIO_readPin+0xae>
    3062:	55 95       	asr	r21
    3064:	47 95       	ror	r20
    3066:	8a 95       	dec	r24
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <GPIO_readPin+0xaa>
    306a:	ca 01       	movw	r24, r20
    306c:	81 70       	andi	r24, 0x01	; 1
    306e:	90 70       	andi	r25, 0x00	; 0
    3070:	88 23       	and	r24, r24
    3072:	19 f0       	breq	.+6      	; 0x307a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	89 83       	std	Y+1, r24	; 0x01
    3078:	31 c0       	rjmp	.+98     	; 0x30dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    307a:	19 82       	std	Y+1, r1	; 0x01
    307c:	2f c0       	rjmp	.+94     	; 0x30dc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    307e:	e3 e3       	ldi	r30, 0x33	; 51
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	88 2f       	mov	r24, r24
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a9 01       	movw	r20, r18
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <GPIO_readPin+0xde>
    3092:	55 95       	asr	r21
    3094:	47 95       	ror	r20
    3096:	8a 95       	dec	r24
    3098:	e2 f7       	brpl	.-8      	; 0x3092 <GPIO_readPin+0xda>
    309a:	ca 01       	movw	r24, r20
    309c:	81 70       	andi	r24, 0x01	; 1
    309e:	90 70       	andi	r25, 0x00	; 0
    30a0:	88 23       	and	r24, r24
    30a2:	19 f0       	breq	.+6      	; 0x30aa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	19 c0       	rjmp	.+50     	; 0x30dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    30aa:	19 82       	std	Y+1, r1	; 0x01
    30ac:	17 c0       	rjmp	.+46     	; 0x30dc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    30ae:	e0 e3       	ldi	r30, 0x30	; 48
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	88 2f       	mov	r24, r24
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a9 01       	movw	r20, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <GPIO_readPin+0x10e>
    30c2:	55 95       	asr	r21
    30c4:	47 95       	ror	r20
    30c6:	8a 95       	dec	r24
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <GPIO_readPin+0x10a>
    30ca:	ca 01       	movw	r24, r20
    30cc:	81 70       	andi	r24, 0x01	; 1
    30ce:	90 70       	andi	r25, 0x00	; 0
    30d0:	88 23       	and	r24, r24
    30d2:	19 f0       	breq	.+6      	; 0x30da <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    30da:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <GPIO_setupPortDirection+0x6>
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <GPIO_setupPortDirection+0x8>
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	84 30       	cpi	r24, 0x04	; 4
    3102:	90 f5       	brcc	.+100    	; 0x3168 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	3c 83       	std	Y+4, r19	; 0x04
    310c:	2b 83       	std	Y+3, r18	; 0x03
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	81 30       	cpi	r24, 0x01	; 1
    3114:	91 05       	cpc	r25, r1
    3116:	d1 f0       	breq	.+52     	; 0x314c <GPIO_setupPortDirection+0x5e>
    3118:	2b 81       	ldd	r18, Y+3	; 0x03
    311a:	3c 81       	ldd	r19, Y+4	; 0x04
    311c:	22 30       	cpi	r18, 0x02	; 2
    311e:	31 05       	cpc	r19, r1
    3120:	2c f4       	brge	.+10     	; 0x312c <GPIO_setupPortDirection+0x3e>
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	00 97       	sbiw	r24, 0x00	; 0
    3128:	61 f0       	breq	.+24     	; 0x3142 <GPIO_setupPortDirection+0x54>
    312a:	1e c0       	rjmp	.+60     	; 0x3168 <GPIO_setupPortDirection+0x7a>
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	22 30       	cpi	r18, 0x02	; 2
    3132:	31 05       	cpc	r19, r1
    3134:	81 f0       	breq	.+32     	; 0x3156 <GPIO_setupPortDirection+0x68>
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	83 30       	cpi	r24, 0x03	; 3
    313c:	91 05       	cpc	r25, r1
    313e:	81 f0       	breq	.+32     	; 0x3160 <GPIO_setupPortDirection+0x72>
    3140:	13 c0       	rjmp	.+38     	; 0x3168 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    3142:	ea e3       	ldi	r30, 0x3A	; 58
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	8a 81       	ldd	r24, Y+2	; 0x02
    3148:	80 83       	st	Z, r24
    314a:	0e c0       	rjmp	.+28     	; 0x3168 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    314c:	e7 e3       	ldi	r30, 0x37	; 55
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	80 83       	st	Z, r24
    3154:	09 c0       	rjmp	.+18     	; 0x3168 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    3156:	e4 e3       	ldi	r30, 0x34	; 52
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	80 83       	st	Z, r24
    315e:	04 c0       	rjmp	.+8      	; 0x3168 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    3160:	e1 e3       	ldi	r30, 0x31	; 49
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	80 83       	st	Z, r24
			break;
		}
	}
}
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	00 d0       	rcall	.+0      	; 0x317c <GPIO_writePort+0x6>
    317c:	00 d0       	rcall	.+0      	; 0x317e <GPIO_writePort+0x8>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	84 30       	cpi	r24, 0x04	; 4
    318a:	90 f5       	brcc	.+100    	; 0x31f0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	3c 83       	std	Y+4, r19	; 0x04
    3194:	2b 83       	std	Y+3, r18	; 0x03
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	81 30       	cpi	r24, 0x01	; 1
    319c:	91 05       	cpc	r25, r1
    319e:	d1 f0       	breq	.+52     	; 0x31d4 <GPIO_writePort+0x5e>
    31a0:	2b 81       	ldd	r18, Y+3	; 0x03
    31a2:	3c 81       	ldd	r19, Y+4	; 0x04
    31a4:	22 30       	cpi	r18, 0x02	; 2
    31a6:	31 05       	cpc	r19, r1
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <GPIO_writePort+0x3e>
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	61 f0       	breq	.+24     	; 0x31ca <GPIO_writePort+0x54>
    31b2:	1e c0       	rjmp	.+60     	; 0x31f0 <GPIO_writePort+0x7a>
    31b4:	2b 81       	ldd	r18, Y+3	; 0x03
    31b6:	3c 81       	ldd	r19, Y+4	; 0x04
    31b8:	22 30       	cpi	r18, 0x02	; 2
    31ba:	31 05       	cpc	r19, r1
    31bc:	81 f0       	breq	.+32     	; 0x31de <GPIO_writePort+0x68>
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	9c 81       	ldd	r25, Y+4	; 0x04
    31c2:	83 30       	cpi	r24, 0x03	; 3
    31c4:	91 05       	cpc	r25, r1
    31c6:	81 f0       	breq	.+32     	; 0x31e8 <GPIO_writePort+0x72>
    31c8:	13 c0       	rjmp	.+38     	; 0x31f0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    31ca:	eb e3       	ldi	r30, 0x3B	; 59
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	80 83       	st	Z, r24
    31d2:	0e c0       	rjmp	.+28     	; 0x31f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    31d4:	e8 e3       	ldi	r30, 0x38	; 56
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	8a 81       	ldd	r24, Y+2	; 0x02
    31da:	80 83       	st	Z, r24
    31dc:	09 c0       	rjmp	.+18     	; 0x31f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    31de:	e5 e3       	ldi	r30, 0x35	; 53
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	80 83       	st	Z, r24
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    31e8:	e2 e3       	ldi	r30, 0x32	; 50
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	8a 81       	ldd	r24, Y+2	; 0x02
    31ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	08 95       	ret

000031fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    31fe:	df 93       	push	r29
    3200:	cf 93       	push	r28
    3202:	00 d0       	rcall	.+0      	; 0x3204 <GPIO_readPort+0x6>
    3204:	00 d0       	rcall	.+0      	; 0x3206 <GPIO_readPort+0x8>
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    320c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	84 30       	cpi	r24, 0x04	; 4
    3212:	90 f5       	brcc	.+100    	; 0x3278 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	28 2f       	mov	r18, r24
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	3c 83       	std	Y+4, r19	; 0x04
    321c:	2b 83       	std	Y+3, r18	; 0x03
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	81 30       	cpi	r24, 0x01	; 1
    3224:	91 05       	cpc	r25, r1
    3226:	d1 f0       	breq	.+52     	; 0x325c <GPIO_readPort+0x5e>
    3228:	2b 81       	ldd	r18, Y+3	; 0x03
    322a:	3c 81       	ldd	r19, Y+4	; 0x04
    322c:	22 30       	cpi	r18, 0x02	; 2
    322e:	31 05       	cpc	r19, r1
    3230:	2c f4       	brge	.+10     	; 0x323c <GPIO_readPort+0x3e>
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	9c 81       	ldd	r25, Y+4	; 0x04
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	61 f0       	breq	.+24     	; 0x3252 <GPIO_readPort+0x54>
    323a:	1e c0       	rjmp	.+60     	; 0x3278 <GPIO_readPort+0x7a>
    323c:	2b 81       	ldd	r18, Y+3	; 0x03
    323e:	3c 81       	ldd	r19, Y+4	; 0x04
    3240:	22 30       	cpi	r18, 0x02	; 2
    3242:	31 05       	cpc	r19, r1
    3244:	81 f0       	breq	.+32     	; 0x3266 <GPIO_readPort+0x68>
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	9c 81       	ldd	r25, Y+4	; 0x04
    324a:	83 30       	cpi	r24, 0x03	; 3
    324c:	91 05       	cpc	r25, r1
    324e:	81 f0       	breq	.+32     	; 0x3270 <GPIO_readPort+0x72>
    3250:	13 c0       	rjmp	.+38     	; 0x3278 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    3252:	e9 e3       	ldi	r30, 0x39	; 57
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	89 83       	std	Y+1, r24	; 0x01
    325a:	0e c0       	rjmp	.+28     	; 0x3278 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    325c:	e6 e3       	ldi	r30, 0x36	; 54
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	09 c0       	rjmp	.+18     	; 0x3278 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    3266:	e3 e3       	ldi	r30, 0x33	; 51
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	04 c0       	rjmp	.+8      	; 0x3278 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3270:	e0 e3       	ldi	r30, 0x30	; 48
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    3278:	89 81       	ldd	r24, Y+1	; 0x01
}
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	08 95       	ret

00003288 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	00 d0       	rcall	.+0      	; 0x328e <KEYPAD_getPressedKey+0x6>
    328e:	0f 92       	push	r0
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    3294:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    3296:	1b 82       	std	Y+3, r1	; 0x03
    3298:	43 c0       	rjmp	.+134    	; 0x3320 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	60 e0       	ldi	r22, 0x00	; 0
    329e:	0e 94 77 18 	call	0x30ee	; 0x30ee <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	98 2f       	mov	r25, r24
    32a6:	9c 5f       	subi	r25, 0xFC	; 252
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	69 2f       	mov	r22, r25
    32ac:	41 e0       	ldi	r20, 0x01	; 1
    32ae:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	9c 01       	movw	r18, r24
    32ba:	2c 5f       	subi	r18, 0xFC	; 252
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <KEYPAD_getPressedKey+0x40>
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	2a 95       	dec	r18
    32ca:	e2 f7       	brpl	.-8      	; 0x32c4 <KEYPAD_getPressedKey+0x3c>
    32cc:	80 95       	com	r24
    32ce:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	69 81       	ldd	r22, Y+1	; 0x01
    32d4:	0e 94 bb 18 	call	0x3176	; 0x3176 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    32d8:	1a 82       	std	Y+2, r1	; 0x02
    32da:	1c c0       	rjmp	.+56     	; 0x3314 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	6a 81       	ldd	r22, Y+2	; 0x02
    32e0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_readPin>
    32e4:	88 23       	and	r24, r24
    32e6:	99 f4       	brne	.+38     	; 0x330e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	88 2f       	mov	r24, r24
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	98 2f       	mov	r25, r24
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	89 0f       	add	r24, r25
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	0e 94 95 19 	call	0x332a	; 0x332a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	8f 5f       	subi	r24, 0xFF	; 255
    3312:	8a 83       	std	Y+2, r24	; 0x02
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	84 30       	cpi	r24, 0x04	; 4
    3318:	08 f3       	brcs	.-62     	; 0x32dc <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	8f 5f       	subi	r24, 0xFF	; 255
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	84 30       	cpi	r24, 0x04	; 4
    3324:	08 f4       	brcc	.+2      	; 0x3328 <KEYPAD_getPressedKey+0xa0>
    3326:	b9 cf       	rjmp	.-142    	; 0x329a <KEYPAD_getPressedKey+0x12>
    3328:	b6 cf       	rjmp	.-148    	; 0x3296 <KEYPAD_getPressedKey+0xe>

0000332a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	00 d0       	rcall	.+0      	; 0x3330 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3330:	00 d0       	rcall	.+0      	; 0x3332 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3338:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	3c 83       	std	Y+4, r19	; 0x04
    3342:	2b 83       	std	Y+3, r18	; 0x03
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	9c 81       	ldd	r25, Y+4	; 0x04
    3348:	88 30       	cpi	r24, 0x08	; 8
    334a:	91 05       	cpc	r25, r1
    334c:	09 f4       	brne	.+2      	; 0x3350 <KEYPAD_4x4_adjustKeyNumber+0x26>
    334e:	70 c0       	rjmp	.+224    	; 0x3430 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3350:	2b 81       	ldd	r18, Y+3	; 0x03
    3352:	3c 81       	ldd	r19, Y+4	; 0x04
    3354:	29 30       	cpi	r18, 0x09	; 9
    3356:	31 05       	cpc	r19, r1
    3358:	5c f5       	brge	.+86     	; 0x33b0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	84 30       	cpi	r24, 0x04	; 4
    3360:	91 05       	cpc	r25, r1
    3362:	09 f4       	brne	.+2      	; 0x3366 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3364:	59 c0       	rjmp	.+178    	; 0x3418 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3366:	2b 81       	ldd	r18, Y+3	; 0x03
    3368:	3c 81       	ldd	r19, Y+4	; 0x04
    336a:	25 30       	cpi	r18, 0x05	; 5
    336c:	31 05       	cpc	r19, r1
    336e:	9c f4       	brge	.+38     	; 0x3396 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	9c 81       	ldd	r25, Y+4	; 0x04
    3374:	82 30       	cpi	r24, 0x02	; 2
    3376:	91 05       	cpc	r25, r1
    3378:	09 f4       	brne	.+2      	; 0x337c <KEYPAD_4x4_adjustKeyNumber+0x52>
    337a:	48 c0       	rjmp	.+144    	; 0x340c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    337c:	2b 81       	ldd	r18, Y+3	; 0x03
    337e:	3c 81       	ldd	r19, Y+4	; 0x04
    3380:	23 30       	cpi	r18, 0x03	; 3
    3382:	31 05       	cpc	r19, r1
    3384:	0c f0       	brlt	.+2      	; 0x3388 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3386:	45 c0       	rjmp	.+138    	; 0x3412 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3388:	8b 81       	ldd	r24, Y+3	; 0x03
    338a:	9c 81       	ldd	r25, Y+4	; 0x04
    338c:	81 30       	cpi	r24, 0x01	; 1
    338e:	91 05       	cpc	r25, r1
    3390:	09 f4       	brne	.+2      	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3392:	39 c0       	rjmp	.+114    	; 0x3406 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3394:	67 c0       	rjmp	.+206    	; 0x3464 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3396:	2b 81       	ldd	r18, Y+3	; 0x03
    3398:	3c 81       	ldd	r19, Y+4	; 0x04
    339a:	26 30       	cpi	r18, 0x06	; 6
    339c:	31 05       	cpc	r19, r1
    339e:	09 f4       	brne	.+2      	; 0x33a2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    33a0:	41 c0       	rjmp	.+130    	; 0x3424 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	9c 81       	ldd	r25, Y+4	; 0x04
    33a6:	87 30       	cpi	r24, 0x07	; 7
    33a8:	91 05       	cpc	r25, r1
    33aa:	0c f0       	brlt	.+2      	; 0x33ae <KEYPAD_4x4_adjustKeyNumber+0x84>
    33ac:	3e c0       	rjmp	.+124    	; 0x342a <KEYPAD_4x4_adjustKeyNumber+0x100>
    33ae:	37 c0       	rjmp	.+110    	; 0x341e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    33b0:	2b 81       	ldd	r18, Y+3	; 0x03
    33b2:	3c 81       	ldd	r19, Y+4	; 0x04
    33b4:	2c 30       	cpi	r18, 0x0C	; 12
    33b6:	31 05       	cpc	r19, r1
    33b8:	09 f4       	brne	.+2      	; 0x33bc <KEYPAD_4x4_adjustKeyNumber+0x92>
    33ba:	46 c0       	rjmp	.+140    	; 0x3448 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	9c 81       	ldd	r25, Y+4	; 0x04
    33c0:	8d 30       	cpi	r24, 0x0D	; 13
    33c2:	91 05       	cpc	r25, r1
    33c4:	5c f4       	brge	.+22     	; 0x33dc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    33c6:	2b 81       	ldd	r18, Y+3	; 0x03
    33c8:	3c 81       	ldd	r19, Y+4	; 0x04
    33ca:	2a 30       	cpi	r18, 0x0A	; 10
    33cc:	31 05       	cpc	r19, r1
    33ce:	b1 f1       	breq	.+108    	; 0x343c <KEYPAD_4x4_adjustKeyNumber+0x112>
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	8b 30       	cpi	r24, 0x0B	; 11
    33d6:	91 05       	cpc	r25, r1
    33d8:	a4 f5       	brge	.+104    	; 0x3442 <KEYPAD_4x4_adjustKeyNumber+0x118>
    33da:	2d c0       	rjmp	.+90     	; 0x3436 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    33dc:	2b 81       	ldd	r18, Y+3	; 0x03
    33de:	3c 81       	ldd	r19, Y+4	; 0x04
    33e0:	2e 30       	cpi	r18, 0x0E	; 14
    33e2:	31 05       	cpc	r19, r1
    33e4:	b9 f1       	breq	.+110    	; 0x3454 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ea:	8e 30       	cpi	r24, 0x0E	; 14
    33ec:	91 05       	cpc	r25, r1
    33ee:	7c f1       	brlt	.+94     	; 0x344e <KEYPAD_4x4_adjustKeyNumber+0x124>
    33f0:	2b 81       	ldd	r18, Y+3	; 0x03
    33f2:	3c 81       	ldd	r19, Y+4	; 0x04
    33f4:	2f 30       	cpi	r18, 0x0F	; 15
    33f6:	31 05       	cpc	r19, r1
    33f8:	79 f1       	breq	.+94     	; 0x3458 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	80 31       	cpi	r24, 0x10	; 16
    3400:	91 05       	cpc	r25, r1
    3402:	69 f1       	breq	.+90     	; 0x345e <KEYPAD_4x4_adjustKeyNumber+0x134>
    3404:	2f c0       	rjmp	.+94     	; 0x3464 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3406:	87 e0       	ldi	r24, 0x07	; 7
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	2e c0       	rjmp	.+92     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    340c:	88 e0       	ldi	r24, 0x08	; 8
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	2b c0       	rjmp	.+86     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3412:	89 e0       	ldi	r24, 0x09	; 9
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	28 c0       	rjmp	.+80     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3418:	85 e2       	ldi	r24, 0x25	; 37
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	25 c0       	rjmp	.+74     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    341e:	84 e0       	ldi	r24, 0x04	; 4
    3420:	89 83       	std	Y+1, r24	; 0x01
    3422:	22 c0       	rjmp	.+68     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3424:	85 e0       	ldi	r24, 0x05	; 5
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	1f c0       	rjmp	.+62     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    342a:	86 e0       	ldi	r24, 0x06	; 6
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	1c c0       	rjmp	.+56     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3430:	8a e2       	ldi	r24, 0x2A	; 42
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	19 c0       	rjmp	.+50     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	16 c0       	rjmp	.+44     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    343c:	82 e0       	ldi	r24, 0x02	; 2
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	13 c0       	rjmp	.+38     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3442:	83 e0       	ldi	r24, 0x03	; 3
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	10 c0       	rjmp	.+32     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3448:	8d e2       	ldi	r24, 0x2D	; 45
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	0d c0       	rjmp	.+26     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    344e:	8d e0       	ldi	r24, 0x0D	; 13
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	0a c0       	rjmp	.+20     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3454:	19 82       	std	Y+1, r1	; 0x01
    3456:	08 c0       	rjmp	.+16     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3458:	8d e3       	ldi	r24, 0x3D	; 61
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	05 c0       	rjmp	.+10     	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    345e:	8b e2       	ldi	r24, 0x2B	; 43
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3468:	89 81       	ldd	r24, Y+1	; 0x01
} 
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	2e 97       	sbiw	r28, 0x0e	; 14
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	60 e0       	ldi	r22, 0x00	; 0
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	41 e0       	ldi	r20, 0x01	; 1
    349c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	61 e0       	ldi	r22, 0x01	; 1
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <GPIO_setupPinDirection>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a0 ea       	ldi	r26, 0xA0	; 160
    34b0:	b1 e4       	ldi	r27, 0x41	; 65
    34b2:	8b 87       	std	Y+11, r24	; 0x0b
    34b4:	9c 87       	std	Y+12, r25	; 0x0c
    34b6:	ad 87       	std	Y+13, r26	; 0x0d
    34b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    34bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34be:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8f 83       	std	Y+7, r24	; 0x07
    34d4:	98 87       	std	Y+8, r25	; 0x08
    34d6:	a9 87       	std	Y+9, r26	; 0x09
    34d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34da:	6f 81       	ldd	r22, Y+7	; 0x07
    34dc:	78 85       	ldd	r23, Y+8	; 0x08
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <LCD_init+0x84>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9e 83       	std	Y+6, r25	; 0x06
    34f8:	8d 83       	std	Y+5, r24	; 0x05
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <LCD_init+0x102>
	else if (__tmp > 65535)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	6b 85       	ldd	r22, Y+11	; 0x0b
    3516:	7c 85       	ldd	r23, Y+12	; 0x0c
    3518:	8d 85       	ldd	r24, Y+13	; 0x0d
    351a:	9e 85       	ldd	r25, Y+14	; 0x0e
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	0f c0       	rjmp	.+30     	; 0x355c <LCD_init+0xe4>
    353e:	88 ec       	ldi	r24, 0xC8	; 200
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	9c 83       	std	Y+4, r25	; 0x04
    3544:	8b 83       	std	Y+3, r24	; 0x03
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <LCD_init+0xd2>
    354e:	9c 83       	std	Y+4, r25	; 0x04
    3550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9e 83       	std	Y+6, r25	; 0x06
    355a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <LCD_init+0xc6>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6f 81       	ldd	r22, Y+7	; 0x07
    3568:	78 85       	ldd	r23, Y+8	; 0x08
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <LCD_init+0x10e>
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	6f ef       	ldi	r22, 0xFF	; 255
    3592:	0e 94 77 18 	call	0x30ee	; 0x30ee <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3596:	88 e3       	ldi	r24, 0x38	; 56
    3598:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    359c:	8c e0       	ldi	r24, 0x0C	; 12
    359e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_sendCommand>
}
    35a8:	2e 96       	adiw	r28, 0x0e	; 14
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	e9 97       	sbiw	r28, 0x39	; 57
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <GPIO_writePin>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	a0 e8       	ldi	r26, 0x80	; 128
    35e0:	bf e3       	ldi	r27, 0x3F	; 63
    35e2:	8d ab       	std	Y+53, r24	; 0x35
    35e4:	9e ab       	std	Y+54, r25	; 0x36
    35e6:	af ab       	std	Y+55, r26	; 0x37
    35e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ea:	6d a9       	ldd	r22, Y+53	; 0x35
    35ec:	7e a9       	ldd	r23, Y+54	; 0x36
    35ee:	8f a9       	ldd	r24, Y+55	; 0x37
    35f0:	98 ad       	ldd	r25, Y+56	; 0x38
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a ef       	ldi	r20, 0xFA	; 250
    35f8:	54 e4       	ldi	r21, 0x44	; 68
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	89 ab       	std	Y+49, r24	; 0x31
    3604:	9a ab       	std	Y+50, r25	; 0x32
    3606:	ab ab       	std	Y+51, r26	; 0x33
    3608:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    360a:	69 a9       	ldd	r22, Y+49	; 0x31
    360c:	7a a9       	ldd	r23, Y+50	; 0x32
    360e:	8b a9       	ldd	r24, Y+51	; 0x33
    3610:	9c a9       	ldd	r25, Y+52	; 0x34
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e8       	ldi	r20, 0x80	; 128
    3618:	5f e3       	ldi	r21, 0x3F	; 63
    361a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    361e:	88 23       	and	r24, r24
    3620:	2c f4       	brge	.+10     	; 0x362c <LCD_sendCommand+0x72>
		__ticks = 1;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	98 ab       	std	Y+48, r25	; 0x30
    3628:	8f a7       	std	Y+47, r24	; 0x2f
    362a:	3f c0       	rjmp	.+126    	; 0x36aa <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    362c:	69 a9       	ldd	r22, Y+49	; 0x31
    362e:	7a a9       	ldd	r23, Y+50	; 0x32
    3630:	8b a9       	ldd	r24, Y+51	; 0x33
    3632:	9c a9       	ldd	r25, Y+52	; 0x34
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	3f ef       	ldi	r19, 0xFF	; 255
    3638:	4f e7       	ldi	r20, 0x7F	; 127
    363a:	57 e4       	ldi	r21, 0x47	; 71
    363c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3640:	18 16       	cp	r1, r24
    3642:	4c f5       	brge	.+82     	; 0x3696 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3644:	6d a9       	ldd	r22, Y+53	; 0x35
    3646:	7e a9       	ldd	r23, Y+54	; 0x36
    3648:	8f a9       	ldd	r24, Y+55	; 0x37
    364a:	98 ad       	ldd	r25, Y+56	; 0x38
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e2       	ldi	r20, 0x20	; 32
    3652:	51 e4       	ldi	r21, 0x41	; 65
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	98 ab       	std	Y+48, r25	; 0x30
    366a:	8f a7       	std	Y+47, r24	; 0x2f
    366c:	0f c0       	rjmp	.+30     	; 0x368c <LCD_sendCommand+0xd2>
    366e:	88 ec       	ldi	r24, 0xC8	; 200
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9e a7       	std	Y+46, r25	; 0x2e
    3674:	8d a7       	std	Y+45, r24	; 0x2d
    3676:	8d a5       	ldd	r24, Y+45	; 0x2d
    3678:	9e a5       	ldd	r25, Y+46	; 0x2e
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <LCD_sendCommand+0xc0>
    367e:	9e a7       	std	Y+46, r25	; 0x2e
    3680:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3682:	8f a5       	ldd	r24, Y+47	; 0x2f
    3684:	98 a9       	ldd	r25, Y+48	; 0x30
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	98 ab       	std	Y+48, r25	; 0x30
    368a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368c:	8f a5       	ldd	r24, Y+47	; 0x2f
    368e:	98 a9       	ldd	r25, Y+48	; 0x30
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	69 f7       	brne	.-38     	; 0x366e <LCD_sendCommand+0xb4>
    3694:	14 c0       	rjmp	.+40     	; 0x36be <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3696:	69 a9       	ldd	r22, Y+49	; 0x31
    3698:	7a a9       	ldd	r23, Y+50	; 0x32
    369a:	8b a9       	ldd	r24, Y+51	; 0x33
    369c:	9c a9       	ldd	r25, Y+52	; 0x34
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	98 ab       	std	Y+48, r25	; 0x30
    36a8:	8f a7       	std	Y+47, r24	; 0x2f
    36aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ac:	98 a9       	ldd	r25, Y+48	; 0x30
    36ae:	9c a7       	std	Y+44, r25	; 0x2c
    36b0:	8b a7       	std	Y+43, r24	; 0x2b
    36b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    36b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <LCD_sendCommand+0xfc>
    36ba:	9c a7       	std	Y+44, r25	; 0x2c
    36bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	62 e0       	ldi	r22, 0x02	; 2
    36c2:	41 e0       	ldi	r20, 0x01	; 1
    36c4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <GPIO_writePin>
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a0 e8       	ldi	r26, 0x80	; 128
    36ce:	bf e3       	ldi	r27, 0x3F	; 63
    36d0:	8f a3       	std	Y+39, r24	; 0x27
    36d2:	98 a7       	std	Y+40, r25	; 0x28
    36d4:	a9 a7       	std	Y+41, r26	; 0x29
    36d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	6f a1       	ldd	r22, Y+39	; 0x27
    36da:	78 a5       	ldd	r23, Y+40	; 0x28
    36dc:	89 a5       	ldd	r24, Y+41	; 0x29
    36de:	9a a5       	ldd	r25, Y+42	; 0x2a
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	4a ef       	ldi	r20, 0xFA	; 250
    36e6:	54 e4       	ldi	r21, 0x44	; 68
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	8b a3       	std	Y+35, r24	; 0x23
    36f2:	9c a3       	std	Y+36, r25	; 0x24
    36f4:	ad a3       	std	Y+37, r26	; 0x25
    36f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36f8:	6b a1       	ldd	r22, Y+35	; 0x23
    36fa:	7c a1       	ldd	r23, Y+36	; 0x24
    36fc:	8d a1       	ldd	r24, Y+37	; 0x25
    36fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	2c f4       	brge	.+10     	; 0x371a <LCD_sendCommand+0x160>
		__ticks = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9a a3       	std	Y+34, r25	; 0x22
    3716:	89 a3       	std	Y+33, r24	; 0x21
    3718:	3f c0       	rjmp	.+126    	; 0x3798 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    371a:	6b a1       	ldd	r22, Y+35	; 0x23
    371c:	7c a1       	ldd	r23, Y+36	; 0x24
    371e:	8d a1       	ldd	r24, Y+37	; 0x25
    3720:	9e a1       	ldd	r25, Y+38	; 0x26
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	3f ef       	ldi	r19, 0xFF	; 255
    3726:	4f e7       	ldi	r20, 0x7F	; 127
    3728:	57 e4       	ldi	r21, 0x47	; 71
    372a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372e:	18 16       	cp	r1, r24
    3730:	4c f5       	brge	.+82     	; 0x3784 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	6f a1       	ldd	r22, Y+39	; 0x27
    3734:	78 a5       	ldd	r23, Y+40	; 0x28
    3736:	89 a5       	ldd	r24, Y+41	; 0x29
    3738:	9a a5       	ldd	r25, Y+42	; 0x2a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9a a3       	std	Y+34, r25	; 0x22
    3758:	89 a3       	std	Y+33, r24	; 0x21
    375a:	0f c0       	rjmp	.+30     	; 0x377a <LCD_sendCommand+0x1c0>
    375c:	88 ec       	ldi	r24, 0xC8	; 200
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	98 a3       	std	Y+32, r25	; 0x20
    3762:	8f 8f       	std	Y+31, r24	; 0x1f
    3764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3766:	98 a1       	ldd	r25, Y+32	; 0x20
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <LCD_sendCommand+0x1ae>
    376c:	98 a3       	std	Y+32, r25	; 0x20
    376e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3770:	89 a1       	ldd	r24, Y+33	; 0x21
    3772:	9a a1       	ldd	r25, Y+34	; 0x22
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	9a a3       	std	Y+34, r25	; 0x22
    3778:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377a:	89 a1       	ldd	r24, Y+33	; 0x21
    377c:	9a a1       	ldd	r25, Y+34	; 0x22
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	69 f7       	brne	.-38     	; 0x375c <LCD_sendCommand+0x1a2>
    3782:	14 c0       	rjmp	.+40     	; 0x37ac <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	6b a1       	ldd	r22, Y+35	; 0x23
    3786:	7c a1       	ldd	r23, Y+36	; 0x24
    3788:	8d a1       	ldd	r24, Y+37	; 0x25
    378a:	9e a1       	ldd	r25, Y+38	; 0x26
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9a a3       	std	Y+34, r25	; 0x22
    3796:	89 a3       	std	Y+33, r24	; 0x21
    3798:	89 a1       	ldd	r24, Y+33	; 0x21
    379a:	9a a1       	ldd	r25, Y+34	; 0x22
    379c:	9e 8f       	std	Y+30, r25	; 0x1e
    379e:	8d 8f       	std	Y+29, r24	; 0x1d
    37a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <LCD_sendCommand+0x1ea>
    37a8:	9e 8f       	std	Y+30, r25	; 0x1e
    37aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	69 ad       	ldd	r22, Y+57	; 0x39
    37b0:	0e 94 bb 18 	call	0x3176	; 0x3176 <GPIO_writePort>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	a0 e8       	ldi	r26, 0x80	; 128
    37ba:	bf e3       	ldi	r27, 0x3F	; 63
    37bc:	89 8f       	std	Y+25, r24	; 0x19
    37be:	9a 8f       	std	Y+26, r25	; 0x1a
    37c0:	ab 8f       	std	Y+27, r26	; 0x1b
    37c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c4:	69 8d       	ldd	r22, Y+25	; 0x19
    37c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	4a ef       	ldi	r20, 0xFA	; 250
    37d2:	54 e4       	ldi	r21, 0x44	; 68
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	8d 8b       	std	Y+21, r24	; 0x15
    37de:	9e 8b       	std	Y+22, r25	; 0x16
    37e0:	af 8b       	std	Y+23, r26	; 0x17
    37e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37e4:	6d 89       	ldd	r22, Y+21	; 0x15
    37e6:	7e 89       	ldd	r23, Y+22	; 0x16
    37e8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ea:	98 8d       	ldd	r25, Y+24	; 0x18
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e8       	ldi	r20, 0x80	; 128
    37f2:	5f e3       	ldi	r21, 0x3F	; 63
    37f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f8:	88 23       	and	r24, r24
    37fa:	2c f4       	brge	.+10     	; 0x3806 <LCD_sendCommand+0x24c>
		__ticks = 1;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9c 8b       	std	Y+20, r25	; 0x14
    3802:	8b 8b       	std	Y+19, r24	; 0x13
    3804:	3f c0       	rjmp	.+126    	; 0x3884 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3806:	6d 89       	ldd	r22, Y+21	; 0x15
    3808:	7e 89       	ldd	r23, Y+22	; 0x16
    380a:	8f 89       	ldd	r24, Y+23	; 0x17
    380c:	98 8d       	ldd	r25, Y+24	; 0x18
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    381a:	18 16       	cp	r1, r24
    381c:	4c f5       	brge	.+82     	; 0x3870 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381e:	69 8d       	ldd	r22, Y+25	; 0x19
    3820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e2       	ldi	r20, 0x20	; 32
    382c:	51 e4       	ldi	r21, 0x41	; 65
    382e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	9c 8b       	std	Y+20, r25	; 0x14
    3844:	8b 8b       	std	Y+19, r24	; 0x13
    3846:	0f c0       	rjmp	.+30     	; 0x3866 <LCD_sendCommand+0x2ac>
    3848:	88 ec       	ldi	r24, 0xC8	; 200
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	9a 8b       	std	Y+18, r25	; 0x12
    384e:	89 8b       	std	Y+17, r24	; 0x11
    3850:	89 89       	ldd	r24, Y+17	; 0x11
    3852:	9a 89       	ldd	r25, Y+18	; 0x12
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <LCD_sendCommand+0x29a>
    3858:	9a 8b       	std	Y+18, r25	; 0x12
    385a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385c:	8b 89       	ldd	r24, Y+19	; 0x13
    385e:	9c 89       	ldd	r25, Y+20	; 0x14
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	9c 8b       	std	Y+20, r25	; 0x14
    3864:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3866:	8b 89       	ldd	r24, Y+19	; 0x13
    3868:	9c 89       	ldd	r25, Y+20	; 0x14
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	69 f7       	brne	.-38     	; 0x3848 <LCD_sendCommand+0x28e>
    386e:	14 c0       	rjmp	.+40     	; 0x3898 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3870:	6d 89       	ldd	r22, Y+21	; 0x15
    3872:	7e 89       	ldd	r23, Y+22	; 0x16
    3874:	8f 89       	ldd	r24, Y+23	; 0x17
    3876:	98 8d       	ldd	r25, Y+24	; 0x18
    3878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	9c 8b       	std	Y+20, r25	; 0x14
    3882:	8b 8b       	std	Y+19, r24	; 0x13
    3884:	8b 89       	ldd	r24, Y+19	; 0x13
    3886:	9c 89       	ldd	r25, Y+20	; 0x14
    3888:	98 8b       	std	Y+16, r25	; 0x10
    388a:	8f 87       	std	Y+15, r24	; 0x0f
    388c:	8f 85       	ldd	r24, Y+15	; 0x0f
    388e:	98 89       	ldd	r25, Y+16	; 0x10
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	f1 f7       	brne	.-4      	; 0x3890 <LCD_sendCommand+0x2d6>
    3894:	98 8b       	std	Y+16, r25	; 0x10
    3896:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	62 e0       	ldi	r22, 0x02	; 2
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <GPIO_writePin>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	a0 e8       	ldi	r26, 0x80	; 128
    38a8:	bf e3       	ldi	r27, 0x3F	; 63
    38aa:	8b 87       	std	Y+11, r24	; 0x0b
    38ac:	9c 87       	std	Y+12, r25	; 0x0c
    38ae:	ad 87       	std	Y+13, r26	; 0x0d
    38b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	4a ef       	ldi	r20, 0xFA	; 250
    38c0:	54 e4       	ldi	r21, 0x44	; 68
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8f 83       	std	Y+7, r24	; 0x07
    38cc:	98 87       	std	Y+8, r25	; 0x08
    38ce:	a9 87       	std	Y+9, r26	; 0x09
    38d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38d2:	6f 81       	ldd	r22, Y+7	; 0x07
    38d4:	78 85       	ldd	r23, Y+8	; 0x08
    38d6:	89 85       	ldd	r24, Y+9	; 0x09
    38d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e8       	ldi	r20, 0x80	; 128
    38e0:	5f e3       	ldi	r21, 0x3F	; 63
    38e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e6:	88 23       	and	r24, r24
    38e8:	2c f4       	brge	.+10     	; 0x38f4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    38f2:	3f c0       	rjmp	.+126    	; 0x3972 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    38f4:	6f 81       	ldd	r22, Y+7	; 0x07
    38f6:	78 85       	ldd	r23, Y+8	; 0x08
    38f8:	89 85       	ldd	r24, Y+9	; 0x09
    38fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	3f ef       	ldi	r19, 0xFF	; 255
    3900:	4f e7       	ldi	r20, 0x7F	; 127
    3902:	57 e4       	ldi	r21, 0x47	; 71
    3904:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3908:	18 16       	cp	r1, r24
    390a:	4c f5       	brge	.+82     	; 0x395e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390c:	6b 85       	ldd	r22, Y+11	; 0x0b
    390e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3910:	8d 85       	ldd	r24, Y+13	; 0x0d
    3912:	9e 85       	ldd	r25, Y+14	; 0x0e
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e2       	ldi	r20, 0x20	; 32
    391a:	51 e4       	ldi	r21, 0x41	; 65
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	9e 83       	std	Y+6, r25	; 0x06
    3932:	8d 83       	std	Y+5, r24	; 0x05
    3934:	0f c0       	rjmp	.+30     	; 0x3954 <LCD_sendCommand+0x39a>
    3936:	88 ec       	ldi	r24, 0xC8	; 200
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	9c 83       	std	Y+4, r25	; 0x04
    393c:	8b 83       	std	Y+3, r24	; 0x03
    393e:	8b 81       	ldd	r24, Y+3	; 0x03
    3940:	9c 81       	ldd	r25, Y+4	; 0x04
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	f1 f7       	brne	.-4      	; 0x3942 <LCD_sendCommand+0x388>
    3946:	9c 83       	std	Y+4, r25	; 0x04
    3948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	9e 81       	ldd	r25, Y+6	; 0x06
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	9e 83       	std	Y+6, r25	; 0x06
    3952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	9e 81       	ldd	r25, Y+6	; 0x06
    3958:	00 97       	sbiw	r24, 0x00	; 0
    395a:	69 f7       	brne	.-38     	; 0x3936 <LCD_sendCommand+0x37c>
    395c:	14 c0       	rjmp	.+40     	; 0x3986 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395e:	6f 81       	ldd	r22, Y+7	; 0x07
    3960:	78 85       	ldd	r23, Y+8	; 0x08
    3962:	89 85       	ldd	r24, Y+9	; 0x09
    3964:	9a 85       	ldd	r25, Y+10	; 0x0a
    3966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	8d 83       	std	Y+5, r24	; 0x05
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	9e 81       	ldd	r25, Y+6	; 0x06
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <LCD_sendCommand+0x3c4>
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3986:	e9 96       	adiw	r28, 0x39	; 57
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	e9 97       	sbiw	r28, 0x39	; 57
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	41 e0       	ldi	r20, 0x01	; 1
    39b4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <GPIO_writePin>
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	a0 e8       	ldi	r26, 0x80	; 128
    39be:	bf e3       	ldi	r27, 0x3F	; 63
    39c0:	8d ab       	std	Y+53, r24	; 0x35
    39c2:	9e ab       	std	Y+54, r25	; 0x36
    39c4:	af ab       	std	Y+55, r26	; 0x37
    39c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c8:	6d a9       	ldd	r22, Y+53	; 0x35
    39ca:	7e a9       	ldd	r23, Y+54	; 0x36
    39cc:	8f a9       	ldd	r24, Y+55	; 0x37
    39ce:	98 ad       	ldd	r25, Y+56	; 0x38
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	4a ef       	ldi	r20, 0xFA	; 250
    39d6:	54 e4       	ldi	r21, 0x44	; 68
    39d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	89 ab       	std	Y+49, r24	; 0x31
    39e2:	9a ab       	std	Y+50, r25	; 0x32
    39e4:	ab ab       	std	Y+51, r26	; 0x33
    39e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39e8:	69 a9       	ldd	r22, Y+49	; 0x31
    39ea:	7a a9       	ldd	r23, Y+50	; 0x32
    39ec:	8b a9       	ldd	r24, Y+51	; 0x33
    39ee:	9c a9       	ldd	r25, Y+52	; 0x34
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e8       	ldi	r20, 0x80	; 128
    39f6:	5f e3       	ldi	r21, 0x3F	; 63
    39f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39fc:	88 23       	and	r24, r24
    39fe:	2c f4       	brge	.+10     	; 0x3a0a <LCD_displayCharacter+0x72>
		__ticks = 1;
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	98 ab       	std	Y+48, r25	; 0x30
    3a06:	8f a7       	std	Y+47, r24	; 0x2f
    3a08:	3f c0       	rjmp	.+126    	; 0x3a88 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3a0a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a0c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a0e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a10:	9c a9       	ldd	r25, Y+52	; 0x34
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	3f ef       	ldi	r19, 0xFF	; 255
    3a16:	4f e7       	ldi	r20, 0x7F	; 127
    3a18:	57 e4       	ldi	r21, 0x47	; 71
    3a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a1e:	18 16       	cp	r1, r24
    3a20:	4c f5       	brge	.+82     	; 0x3a74 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a22:	6d a9       	ldd	r22, Y+53	; 0x35
    3a24:	7e a9       	ldd	r23, Y+54	; 0x36
    3a26:	8f a9       	ldd	r24, Y+55	; 0x37
    3a28:	98 ad       	ldd	r25, Y+56	; 0x38
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e2       	ldi	r20, 0x20	; 32
    3a30:	51 e4       	ldi	r21, 0x41	; 65
    3a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	bc 01       	movw	r22, r24
    3a3c:	cd 01       	movw	r24, r26
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	98 ab       	std	Y+48, r25	; 0x30
    3a48:	8f a7       	std	Y+47, r24	; 0x2f
    3a4a:	0f c0       	rjmp	.+30     	; 0x3a6a <LCD_displayCharacter+0xd2>
    3a4c:	88 ec       	ldi	r24, 0xC8	; 200
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	9e a7       	std	Y+46, r25	; 0x2e
    3a52:	8d a7       	std	Y+45, r24	; 0x2d
    3a54:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a56:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a58:	01 97       	sbiw	r24, 0x01	; 1
    3a5a:	f1 f7       	brne	.-4      	; 0x3a58 <LCD_displayCharacter+0xc0>
    3a5c:	9e a7       	std	Y+46, r25	; 0x2e
    3a5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a62:	98 a9       	ldd	r25, Y+48	; 0x30
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	98 ab       	std	Y+48, r25	; 0x30
    3a68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	69 f7       	brne	.-38     	; 0x3a4c <LCD_displayCharacter+0xb4>
    3a72:	14 c0       	rjmp	.+40     	; 0x3a9c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a74:	69 a9       	ldd	r22, Y+49	; 0x31
    3a76:	7a a9       	ldd	r23, Y+50	; 0x32
    3a78:	8b a9       	ldd	r24, Y+51	; 0x33
    3a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	98 ab       	std	Y+48, r25	; 0x30
    3a86:	8f a7       	std	Y+47, r24	; 0x2f
    3a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a8c:	9c a7       	std	Y+44, r25	; 0x2c
    3a8e:	8b a7       	std	Y+43, r24	; 0x2b
    3a90:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a92:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <LCD_displayCharacter+0xfc>
    3a98:	9c a7       	std	Y+44, r25	; 0x2c
    3a9a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	62 e0       	ldi	r22, 0x02	; 2
    3aa0:	41 e0       	ldi	r20, 0x01	; 1
    3aa2:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <GPIO_writePin>
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	a0 e8       	ldi	r26, 0x80	; 128
    3aac:	bf e3       	ldi	r27, 0x3F	; 63
    3aae:	8f a3       	std	Y+39, r24	; 0x27
    3ab0:	98 a7       	std	Y+40, r25	; 0x28
    3ab2:	a9 a7       	std	Y+41, r26	; 0x29
    3ab4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ab8:	78 a5       	ldd	r23, Y+40	; 0x28
    3aba:	89 a5       	ldd	r24, Y+41	; 0x29
    3abc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	4a ef       	ldi	r20, 0xFA	; 250
    3ac4:	54 e4       	ldi	r21, 0x44	; 68
    3ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	8b a3       	std	Y+35, r24	; 0x23
    3ad0:	9c a3       	std	Y+36, r25	; 0x24
    3ad2:	ad a3       	std	Y+37, r26	; 0x25
    3ad4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    3ada:	8d a1       	ldd	r24, Y+37	; 0x25
    3adc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e8       	ldi	r20, 0x80	; 128
    3ae4:	5f e3       	ldi	r21, 0x3F	; 63
    3ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aea:	88 23       	and	r24, r24
    3aec:	2c f4       	brge	.+10     	; 0x3af8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	9a a3       	std	Y+34, r25	; 0x22
    3af4:	89 a3       	std	Y+33, r24	; 0x21
    3af6:	3f c0       	rjmp	.+126    	; 0x3b76 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3af8:	6b a1       	ldd	r22, Y+35	; 0x23
    3afa:	7c a1       	ldd	r23, Y+36	; 0x24
    3afc:	8d a1       	ldd	r24, Y+37	; 0x25
    3afe:	9e a1       	ldd	r25, Y+38	; 0x26
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	3f ef       	ldi	r19, 0xFF	; 255
    3b04:	4f e7       	ldi	r20, 0x7F	; 127
    3b06:	57 e4       	ldi	r21, 0x47	; 71
    3b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b0c:	18 16       	cp	r1, r24
    3b0e:	4c f5       	brge	.+82     	; 0x3b62 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b10:	6f a1       	ldd	r22, Y+39	; 0x27
    3b12:	78 a5       	ldd	r23, Y+40	; 0x28
    3b14:	89 a5       	ldd	r24, Y+41	; 0x29
    3b16:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e2       	ldi	r20, 0x20	; 32
    3b1e:	51 e4       	ldi	r21, 0x41	; 65
    3b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	9a a3       	std	Y+34, r25	; 0x22
    3b36:	89 a3       	std	Y+33, r24	; 0x21
    3b38:	0f c0       	rjmp	.+30     	; 0x3b58 <LCD_displayCharacter+0x1c0>
    3b3a:	88 ec       	ldi	r24, 0xC8	; 200
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	98 a3       	std	Y+32, r25	; 0x20
    3b40:	8f 8f       	std	Y+31, r24	; 0x1f
    3b42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b44:	98 a1       	ldd	r25, Y+32	; 0x20
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <LCD_displayCharacter+0x1ae>
    3b4a:	98 a3       	std	Y+32, r25	; 0x20
    3b4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b50:	9a a1       	ldd	r25, Y+34	; 0x22
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	9a a3       	std	Y+34, r25	; 0x22
    3b56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b58:	89 a1       	ldd	r24, Y+33	; 0x21
    3b5a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	69 f7       	brne	.-38     	; 0x3b3a <LCD_displayCharacter+0x1a2>
    3b60:	14 c0       	rjmp	.+40     	; 0x3b8a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b62:	6b a1       	ldd	r22, Y+35	; 0x23
    3b64:	7c a1       	ldd	r23, Y+36	; 0x24
    3b66:	8d a1       	ldd	r24, Y+37	; 0x25
    3b68:	9e a1       	ldd	r25, Y+38	; 0x26
    3b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	9a a3       	std	Y+34, r25	; 0x22
    3b74:	89 a3       	std	Y+33, r24	; 0x21
    3b76:	89 a1       	ldd	r24, Y+33	; 0x21
    3b78:	9a a1       	ldd	r25, Y+34	; 0x22
    3b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b7c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	f1 f7       	brne	.-4      	; 0x3b82 <LCD_displayCharacter+0x1ea>
    3b86:	9e 8f       	std	Y+30, r25	; 0x1e
    3b88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	69 ad       	ldd	r22, Y+57	; 0x39
    3b8e:	0e 94 bb 18 	call	0x3176	; 0x3176 <GPIO_writePort>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	a0 e8       	ldi	r26, 0x80	; 128
    3b98:	bf e3       	ldi	r27, 0x3F	; 63
    3b9a:	89 8f       	std	Y+25, r24	; 0x19
    3b9c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b9e:	ab 8f       	std	Y+27, r26	; 0x1b
    3ba0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	4a ef       	ldi	r20, 0xFA	; 250
    3bb0:	54 e4       	ldi	r21, 0x44	; 68
    3bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	8d 8b       	std	Y+21, r24	; 0x15
    3bbc:	9e 8b       	std	Y+22, r25	; 0x16
    3bbe:	af 8b       	std	Y+23, r26	; 0x17
    3bc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e8       	ldi	r20, 0x80	; 128
    3bd0:	5f e3       	ldi	r21, 0x3F	; 63
    3bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd6:	88 23       	and	r24, r24
    3bd8:	2c f4       	brge	.+10     	; 0x3be4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	9c 8b       	std	Y+20, r25	; 0x14
    3be0:	8b 8b       	std	Y+19, r24	; 0x13
    3be2:	3f c0       	rjmp	.+126    	; 0x3c62 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3be4:	6d 89       	ldd	r22, Y+21	; 0x15
    3be6:	7e 89       	ldd	r23, Y+22	; 0x16
    3be8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bea:	98 8d       	ldd	r25, Y+24	; 0x18
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	3f ef       	ldi	r19, 0xFF	; 255
    3bf0:	4f e7       	ldi	r20, 0x7F	; 127
    3bf2:	57 e4       	ldi	r21, 0x47	; 71
    3bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf8:	18 16       	cp	r1, r24
    3bfa:	4c f5       	brge	.+82     	; 0x3c4e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    3bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e2       	ldi	r20, 0x20	; 32
    3c0a:	51 e4       	ldi	r21, 0x41	; 65
    3c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	bc 01       	movw	r22, r24
    3c16:	cd 01       	movw	r24, r26
    3c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	9c 8b       	std	Y+20, r25	; 0x14
    3c22:	8b 8b       	std	Y+19, r24	; 0x13
    3c24:	0f c0       	rjmp	.+30     	; 0x3c44 <LCD_displayCharacter+0x2ac>
    3c26:	88 ec       	ldi	r24, 0xC8	; 200
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9a 8b       	std	Y+18, r25	; 0x12
    3c2c:	89 8b       	std	Y+17, r24	; 0x11
    3c2e:	89 89       	ldd	r24, Y+17	; 0x11
    3c30:	9a 89       	ldd	r25, Y+18	; 0x12
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	f1 f7       	brne	.-4      	; 0x3c32 <LCD_displayCharacter+0x29a>
    3c36:	9a 8b       	std	Y+18, r25	; 0x12
    3c38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	9c 8b       	std	Y+20, r25	; 0x14
    3c42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c44:	8b 89       	ldd	r24, Y+19	; 0x13
    3c46:	9c 89       	ldd	r25, Y+20	; 0x14
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	69 f7       	brne	.-38     	; 0x3c26 <LCD_displayCharacter+0x28e>
    3c4c:	14 c0       	rjmp	.+40     	; 0x3c76 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c50:	7e 89       	ldd	r23, Y+22	; 0x16
    3c52:	8f 89       	ldd	r24, Y+23	; 0x17
    3c54:	98 8d       	ldd	r25, Y+24	; 0x18
    3c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	9c 8b       	std	Y+20, r25	; 0x14
    3c60:	8b 8b       	std	Y+19, r24	; 0x13
    3c62:	8b 89       	ldd	r24, Y+19	; 0x13
    3c64:	9c 89       	ldd	r25, Y+20	; 0x14
    3c66:	98 8b       	std	Y+16, r25	; 0x10
    3c68:	8f 87       	std	Y+15, r24	; 0x0f
    3c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c6c:	98 89       	ldd	r25, Y+16	; 0x10
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <LCD_displayCharacter+0x2d6>
    3c72:	98 8b       	std	Y+16, r25	; 0x10
    3c74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	62 e0       	ldi	r22, 0x02	; 2
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <GPIO_writePin>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	a0 e8       	ldi	r26, 0x80	; 128
    3c86:	bf e3       	ldi	r27, 0x3F	; 63
    3c88:	8b 87       	std	Y+11, r24	; 0x0b
    3c8a:	9c 87       	std	Y+12, r25	; 0x0c
    3c8c:	ad 87       	std	Y+13, r26	; 0x0d
    3c8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	4a ef       	ldi	r20, 0xFA	; 250
    3c9e:	54 e4       	ldi	r21, 0x44	; 68
    3ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	8f 83       	std	Y+7, r24	; 0x07
    3caa:	98 87       	std	Y+8, r25	; 0x08
    3cac:	a9 87       	std	Y+9, r26	; 0x09
    3cae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb2:	78 85       	ldd	r23, Y+8	; 0x08
    3cb4:	89 85       	ldd	r24, Y+9	; 0x09
    3cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e8       	ldi	r20, 0x80	; 128
    3cbe:	5f e3       	ldi	r21, 0x3F	; 63
    3cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc4:	88 23       	and	r24, r24
    3cc6:	2c f4       	brge	.+10     	; 0x3cd2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	9e 83       	std	Y+6, r25	; 0x06
    3cce:	8d 83       	std	Y+5, r24	; 0x05
    3cd0:	3f c0       	rjmp	.+126    	; 0x3d50 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd4:	78 85       	ldd	r23, Y+8	; 0x08
    3cd6:	89 85       	ldd	r24, Y+9	; 0x09
    3cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	3f ef       	ldi	r19, 0xFF	; 255
    3cde:	4f e7       	ldi	r20, 0x7F	; 127
    3ce0:	57 e4       	ldi	r21, 0x47	; 71
    3ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ce6:	18 16       	cp	r1, r24
    3ce8:	4c f5       	brge	.+82     	; 0x3d3c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e2       	ldi	r20, 0x20	; 32
    3cf8:	51 e4       	ldi	r21, 0x41	; 65
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	bc 01       	movw	r22, r24
    3d04:	cd 01       	movw	r24, r26
    3d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	9e 83       	std	Y+6, r25	; 0x06
    3d10:	8d 83       	std	Y+5, r24	; 0x05
    3d12:	0f c0       	rjmp	.+30     	; 0x3d32 <LCD_displayCharacter+0x39a>
    3d14:	88 ec       	ldi	r24, 0xC8	; 200
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9c 83       	std	Y+4, r25	; 0x04
    3d1a:	8b 83       	std	Y+3, r24	; 0x03
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCD_displayCharacter+0x388>
    3d24:	9c 83       	std	Y+4, r25	; 0x04
    3d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d28:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	9e 83       	std	Y+6, r25	; 0x06
    3d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d32:	8d 81       	ldd	r24, Y+5	; 0x05
    3d34:	9e 81       	ldd	r25, Y+6	; 0x06
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	69 f7       	brne	.-38     	; 0x3d14 <LCD_displayCharacter+0x37c>
    3d3a:	14 c0       	rjmp	.+40     	; 0x3d64 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3e:	78 85       	ldd	r23, Y+8	; 0x08
    3d40:	89 85       	ldd	r24, Y+9	; 0x09
    3d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	9e 83       	std	Y+6, r25	; 0x06
    3d4e:	8d 83       	std	Y+5, r24	; 0x05
    3d50:	8d 81       	ldd	r24, Y+5	; 0x05
    3d52:	9e 81       	ldd	r25, Y+6	; 0x06
    3d54:	9a 83       	std	Y+2, r25	; 0x02
    3d56:	89 83       	std	Y+1, r24	; 0x01
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <LCD_displayCharacter+0x3c4>
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3d64:	e9 96       	adiw	r28, 0x39	; 57
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	cf 91       	pop	r28
    3d72:	df 91       	pop	r29
    3d74:	08 95       	ret

00003d76 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3d76:	df 93       	push	r29
    3d78:	cf 93       	push	r28
    3d7a:	00 d0       	rcall	.+0      	; 0x3d7c <LCD_displayString+0x6>
    3d7c:	0f 92       	push	r0
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	9b 83       	std	Y+3, r25	; 0x03
    3d84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d86:	19 82       	std	Y+1, r1	; 0x01
    3d88:	0e c0       	rjmp	.+28     	; 0x3da6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	28 2f       	mov	r18, r24
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	9b 81       	ldd	r25, Y+3	; 0x03
    3d94:	fc 01       	movw	r30, r24
    3d96:	e2 0f       	add	r30, r18
    3d98:	f3 1f       	adc	r31, r19
    3d9a:	80 81       	ld	r24, Z
    3d9c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <LCD_displayCharacter>
		i++;
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	8f 5f       	subi	r24, 0xFF	; 255
    3da4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	28 2f       	mov	r18, r24
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	9b 81       	ldd	r25, Y+3	; 0x03
    3db0:	fc 01       	movw	r30, r24
    3db2:	e2 0f       	add	r30, r18
    3db4:	f3 1f       	adc	r31, r19
    3db6:	80 81       	ld	r24, Z
    3db8:	88 23       	and	r24, r24
    3dba:	39 f7       	brne	.-50     	; 0x3d8a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	08 95       	ret

00003dc8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3dc8:	df 93       	push	r29
    3dca:	cf 93       	push	r28
    3dcc:	00 d0       	rcall	.+0      	; 0x3dce <LCD_moveCursor+0x6>
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <LCD_moveCursor+0x8>
    3dd0:	0f 92       	push	r0
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	8a 83       	std	Y+2, r24	; 0x02
    3dd8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	28 2f       	mov	r18, r24
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	3d 83       	std	Y+5, r19	; 0x05
    3de2:	2c 83       	std	Y+4, r18	; 0x04
    3de4:	8c 81       	ldd	r24, Y+4	; 0x04
    3de6:	9d 81       	ldd	r25, Y+5	; 0x05
    3de8:	81 30       	cpi	r24, 0x01	; 1
    3dea:	91 05       	cpc	r25, r1
    3dec:	c1 f0       	breq	.+48     	; 0x3e1e <LCD_moveCursor+0x56>
    3dee:	2c 81       	ldd	r18, Y+4	; 0x04
    3df0:	3d 81       	ldd	r19, Y+5	; 0x05
    3df2:	22 30       	cpi	r18, 0x02	; 2
    3df4:	31 05       	cpc	r19, r1
    3df6:	2c f4       	brge	.+10     	; 0x3e02 <LCD_moveCursor+0x3a>
    3df8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfc:	00 97       	sbiw	r24, 0x00	; 0
    3dfe:	61 f0       	breq	.+24     	; 0x3e18 <LCD_moveCursor+0x50>
    3e00:	19 c0       	rjmp	.+50     	; 0x3e34 <LCD_moveCursor+0x6c>
    3e02:	2c 81       	ldd	r18, Y+4	; 0x04
    3e04:	3d 81       	ldd	r19, Y+5	; 0x05
    3e06:	22 30       	cpi	r18, 0x02	; 2
    3e08:	31 05       	cpc	r19, r1
    3e0a:	69 f0       	breq	.+26     	; 0x3e26 <LCD_moveCursor+0x5e>
    3e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e10:	83 30       	cpi	r24, 0x03	; 3
    3e12:	91 05       	cpc	r25, r1
    3e14:	61 f0       	breq	.+24     	; 0x3e2e <LCD_moveCursor+0x66>
    3e16:	0e c0       	rjmp	.+28     	; 0x3e34 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3e18:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1a:	89 83       	std	Y+1, r24	; 0x01
    3e1c:	0b c0       	rjmp	.+22     	; 0x3e34 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e20:	80 5c       	subi	r24, 0xC0	; 192
    3e22:	89 83       	std	Y+1, r24	; 0x01
    3e24:	07 c0       	rjmp	.+14     	; 0x3e34 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3e26:	8b 81       	ldd	r24, Y+3	; 0x03
    3e28:	80 5f       	subi	r24, 0xF0	; 240
    3e2a:	89 83       	std	Y+1, r24	; 0x01
    3e2c:	03 c0       	rjmp	.+6      	; 0x3e34 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e30:	80 5b       	subi	r24, 0xB0	; 176
    3e32:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	80 68       	ori	r24, 0x80	; 128
    3e38:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_sendCommand>
}
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	08 95       	ret

00003e4c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <LCD_displayStringRowColumn+0x6>
    3e52:	00 d0       	rcall	.+0      	; 0x3e54 <LCD_displayStringRowColumn+0x8>
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
    3e58:	89 83       	std	Y+1, r24	; 0x01
    3e5a:	6a 83       	std	Y+2, r22	; 0x02
    3e5c:	5c 83       	std	Y+4, r21	; 0x04
    3e5e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	6a 81       	ldd	r22, Y+2	; 0x02
    3e64:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3e68:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
}
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	62 97       	sbiw	r28, 0x12	; 18
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	9a 8b       	std	Y+18, r25	; 0x12
    3e94:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3e96:	89 89       	ldd	r24, Y+17	; 0x11
    3e98:	9a 89       	ldd	r25, Y+18	; 0x12
    3e9a:	9e 01       	movw	r18, r28
    3e9c:	2f 5f       	subi	r18, 0xFF	; 255
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	b9 01       	movw	r22, r18
    3ea2:	4a e0       	ldi	r20, 0x0A	; 10
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <itoa>
   LCD_displayString(buff); /* Display the string */
    3eaa:	ce 01       	movw	r24, r28
    3eac:	01 96       	adiw	r24, 0x01	; 1
    3eae:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <LCD_displayString>
}
    3eb2:	62 96       	adiw	r28, 0x12	; 18
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	de bf       	out	0x3e, r29	; 62
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	cd bf       	out	0x3d, r28	; 61
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_sendCommand>
}
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	28 97       	sbiw	r28, 0x08	; 8
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	98 87       	std	Y+8, r25	; 0x08
    3eee:	8f 83       	std	Y+7, r24	; 0x07
	uint16 ubrr_value = 0;
    3ef0:	1e 82       	std	Y+6, r1	; 0x06
    3ef2:	1d 82       	std	Y+5, r1	; 0x05

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3ef4:	eb e2       	ldi	r30, 0x2B	; 43
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	80 83       	st	Z, r24
	//set baud rate
	uint32 baud_rate=Config_Ptr->baud_rate;
    3efc:	ef 81       	ldd	r30, Y+7	; 0x07
    3efe:	f8 85       	ldd	r31, Y+8	; 0x08
    3f00:	83 81       	ldd	r24, Z+3	; 0x03
    3f02:	94 81       	ldd	r25, Z+4	; 0x04
    3f04:	a5 81       	ldd	r26, Z+5	; 0x05
    3f06:	b6 81       	ldd	r27, Z+6	; 0x06
    3f08:	89 83       	std	Y+1, r24	; 0x01
    3f0a:	9a 83       	std	Y+2, r25	; 0x02
    3f0c:	ab 83       	std	Y+3, r26	; 0x03
    3f0e:	bc 83       	std	Y+4, r27	; 0x04
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3f10:	ea e2       	ldi	r30, 0x2A	; 42
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	88 e1       	ldi	r24, 0x18	; 24
    3f16:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3f18:	e0 e4       	ldi	r30, 0x40	; 64
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 e8       	ldi	r24, 0x80	; 128
    3f1e:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data) << 1);
    3f20:	a0 e4       	ldi	r26, 0x40	; 64
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	e0 e4       	ldi	r30, 0x40	; 64
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	29 7f       	andi	r18, 0xF9	; 249
    3f2e:	ef 81       	ldd	r30, Y+7	; 0x07
    3f30:	f8 85       	ldd	r31, Y+8	; 0x08
    3f32:	80 81       	ld	r24, Z
    3f34:	88 2f       	mov	r24, r24
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	82 2b       	or	r24, r18
    3f3e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit) << 3);
    3f40:	a0 e4       	ldi	r26, 0x40	; 64
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e0 e4       	ldi	r30, 0x40	; 64
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	27 7f       	andi	r18, 0xF7	; 247
    3f4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3f50:	f8 85       	ldd	r31, Y+8	; 0x08
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	88 2f       	mov	r24, r24
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	88 0f       	add	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	88 0f       	add	r24, r24
    3f5e:	99 1f       	adc	r25, r25
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	82 2b       	or	r24, r18
    3f66:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity) << 4);
    3f68:	a0 e4       	ldi	r26, 0x40	; 64
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	e0 e4       	ldi	r30, 0x40	; 64
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	28 2f       	mov	r18, r24
    3f74:	2f 7c       	andi	r18, 0xCF	; 207
    3f76:	ef 81       	ldd	r30, Y+7	; 0x07
    3f78:	f8 85       	ldd	r31, Y+8	; 0x08
    3f7a:	81 81       	ldd	r24, Z+1	; 0x01
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	82 95       	swap	r24
    3f82:	92 95       	swap	r25
    3f84:	90 7f       	andi	r25, 0xF0	; 240
    3f86:	98 27       	eor	r25, r24
    3f88:	80 7f       	andi	r24, 0xF0	; 240
    3f8a:	98 27       	eor	r25, r24
    3f8c:	82 2b       	or	r24, r18
    3f8e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((baud_rate) * 8UL))) - 1);
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	ab 81       	ldd	r26, Y+3	; 0x03
    3f96:	bc 81       	ldd	r27, Y+4	; 0x04
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	aa 1f       	adc	r26, r26
    3f9e:	bb 1f       	adc	r27, r27
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	aa 1f       	adc	r26, r26
    3fa6:	bb 1f       	adc	r27, r27
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	aa 1f       	adc	r26, r26
    3fae:	bb 1f       	adc	r27, r27
    3fb0:	9c 01       	movw	r18, r24
    3fb2:	ad 01       	movw	r20, r26
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	92 e1       	ldi	r25, 0x12	; 18
    3fb8:	aa e7       	ldi	r26, 0x7A	; 122
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodsi4>
    3fc4:	da 01       	movw	r26, r20
    3fc6:	c9 01       	movw	r24, r18
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3fce:	e0 e4       	ldi	r30, 0x40	; 64
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	89 2f       	mov	r24, r25
    3fd8:	99 27       	eor	r25, r25
    3fda:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3fdc:	e9 e2       	ldi	r30, 0x29	; 41
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe2:	80 83       	st	Z, r24
}
    3fe4:	28 96       	adiw	r28, 0x08	; 8
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	0f 92       	push	r0
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    4002:	eb e2       	ldi	r30, 0x2B	; 43
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	88 2f       	mov	r24, r24
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	80 72       	andi	r24, 0x20	; 32
    400e:	90 70       	andi	r25, 0x00	; 0
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	b9 f3       	breq	.-18     	; 0x4002 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4014:	ec e2       	ldi	r30, 0x2C	; 44
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    401c:	0f 90       	pop	r0
    401e:	cf 91       	pop	r28
    4020:	df 91       	pop	r29
    4022:	08 95       	ret

00004024 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4024:	df 93       	push	r29
    4026:	cf 93       	push	r28
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    402c:	eb e2       	ldi	r30, 0x2B	; 43
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	88 23       	and	r24, r24
    4034:	dc f7       	brge	.-10     	; 0x402c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4036:	ec e2       	ldi	r30, 0x2C	; 44
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	80 81       	ld	r24, Z
}
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	00 d0       	rcall	.+0      	; 0x4048 <UART_sendString+0x6>
    4048:	0f 92       	push	r0
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	9b 83       	std	Y+3, r25	; 0x03
    4050:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4052:	19 82       	std	Y+1, r1	; 0x01
    4054:	0e c0       	rjmp	.+28     	; 0x4072 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	9b 81       	ldd	r25, Y+3	; 0x03
    4060:	fc 01       	movw	r30, r24
    4062:	e2 0f       	add	r30, r18
    4064:	f3 1f       	adc	r31, r19
    4066:	80 81       	ld	r24, Z
    4068:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		i++;
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	8f 5f       	subi	r24, 0xFF	; 255
    4070:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	28 2f       	mov	r18, r24
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	9b 81       	ldd	r25, Y+3	; 0x03
    407c:	fc 01       	movw	r30, r24
    407e:	e2 0f       	add	r30, r18
    4080:	f3 1f       	adc	r31, r19
    4082:	80 81       	ld	r24, Z
    4084:	88 23       	and	r24, r24
    4086:	39 f7       	brne	.-50     	; 0x4056 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	df 93       	push	r29
    409a:	cf 93       	push	r28
    409c:	00 d0       	rcall	.+0      	; 0x409e <UART_receiveString+0xa>
    409e:	0f 92       	push	r0
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	9b 83       	std	Y+3, r25	; 0x03
    40a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    40a8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	8a 81       	ldd	r24, Y+2	; 0x02
    40b2:	9b 81       	ldd	r25, Y+3	; 0x03
    40b4:	8c 01       	movw	r16, r24
    40b6:	02 0f       	add	r16, r18
    40b8:	13 1f       	adc	r17, r19
    40ba:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    40be:	f8 01       	movw	r30, r16
    40c0:	80 83       	st	Z, r24
    40c2:	0f c0       	rjmp	.+30     	; 0x40e2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	8f 5f       	subi	r24, 0xFF	; 255
    40c8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	8c 01       	movw	r16, r24
    40d6:	02 0f       	add	r16, r18
    40d8:	13 1f       	adc	r17, r19
    40da:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    40de:	f8 01       	movw	r30, r16
    40e0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	28 2f       	mov	r18, r24
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	fc 01       	movw	r30, r24
    40ee:	e2 0f       	add	r30, r18
    40f0:	f3 1f       	adc	r31, r19
    40f2:	80 81       	ld	r24, Z
    40f4:	83 32       	cpi	r24, 0x23	; 35
    40f6:	31 f7       	brne	.-52     	; 0x40c4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	28 2f       	mov	r18, r24
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	fc 01       	movw	r30, r24
    4104:	e2 0f       	add	r30, r18
    4106:	f3 1f       	adc	r31, r19
    4108:	10 82       	st	Z, r1
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	08 95       	ret

0000411a <__udivmodsi4>:
    411a:	a1 e2       	ldi	r26, 0x21	; 33
    411c:	1a 2e       	mov	r1, r26
    411e:	aa 1b       	sub	r26, r26
    4120:	bb 1b       	sub	r27, r27
    4122:	fd 01       	movw	r30, r26
    4124:	0d c0       	rjmp	.+26     	; 0x4140 <__udivmodsi4_ep>

00004126 <__udivmodsi4_loop>:
    4126:	aa 1f       	adc	r26, r26
    4128:	bb 1f       	adc	r27, r27
    412a:	ee 1f       	adc	r30, r30
    412c:	ff 1f       	adc	r31, r31
    412e:	a2 17       	cp	r26, r18
    4130:	b3 07       	cpc	r27, r19
    4132:	e4 07       	cpc	r30, r20
    4134:	f5 07       	cpc	r31, r21
    4136:	20 f0       	brcs	.+8      	; 0x4140 <__udivmodsi4_ep>
    4138:	a2 1b       	sub	r26, r18
    413a:	b3 0b       	sbc	r27, r19
    413c:	e4 0b       	sbc	r30, r20
    413e:	f5 0b       	sbc	r31, r21

00004140 <__udivmodsi4_ep>:
    4140:	66 1f       	adc	r22, r22
    4142:	77 1f       	adc	r23, r23
    4144:	88 1f       	adc	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	1a 94       	dec	r1
    414a:	69 f7       	brne	.-38     	; 0x4126 <__udivmodsi4_loop>
    414c:	60 95       	com	r22
    414e:	70 95       	com	r23
    4150:	80 95       	com	r24
    4152:	90 95       	com	r25
    4154:	9b 01       	movw	r18, r22
    4156:	ac 01       	movw	r20, r24
    4158:	bd 01       	movw	r22, r26
    415a:	cf 01       	movw	r24, r30
    415c:	08 95       	ret

0000415e <__prologue_saves__>:
    415e:	2f 92       	push	r2
    4160:	3f 92       	push	r3
    4162:	4f 92       	push	r4
    4164:	5f 92       	push	r5
    4166:	6f 92       	push	r6
    4168:	7f 92       	push	r7
    416a:	8f 92       	push	r8
    416c:	9f 92       	push	r9
    416e:	af 92       	push	r10
    4170:	bf 92       	push	r11
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	ca 1b       	sub	r28, r26
    4188:	db 0b       	sbc	r29, r27
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	09 94       	ijmp

00004196 <__epilogue_restores__>:
    4196:	2a 88       	ldd	r2, Y+18	; 0x12
    4198:	39 88       	ldd	r3, Y+17	; 0x11
    419a:	48 88       	ldd	r4, Y+16	; 0x10
    419c:	5f 84       	ldd	r5, Y+15	; 0x0f
    419e:	6e 84       	ldd	r6, Y+14	; 0x0e
    41a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a8:	b9 84       	ldd	r11, Y+9	; 0x09
    41aa:	c8 84       	ldd	r12, Y+8	; 0x08
    41ac:	df 80       	ldd	r13, Y+7	; 0x07
    41ae:	ee 80       	ldd	r14, Y+6	; 0x06
    41b0:	fd 80       	ldd	r15, Y+5	; 0x05
    41b2:	0c 81       	ldd	r16, Y+4	; 0x04
    41b4:	1b 81       	ldd	r17, Y+3	; 0x03
    41b6:	aa 81       	ldd	r26, Y+2	; 0x02
    41b8:	b9 81       	ldd	r27, Y+1	; 0x01
    41ba:	ce 0f       	add	r28, r30
    41bc:	d1 1d       	adc	r29, r1
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	ed 01       	movw	r28, r26
    41ca:	08 95       	ret

000041cc <itoa>:
    41cc:	fb 01       	movw	r30, r22
    41ce:	9f 01       	movw	r18, r30
    41d0:	e8 94       	clt
    41d2:	42 30       	cpi	r20, 0x02	; 2
    41d4:	c4 f0       	brlt	.+48     	; 0x4206 <itoa+0x3a>
    41d6:	45 32       	cpi	r20, 0x25	; 37
    41d8:	b4 f4       	brge	.+44     	; 0x4206 <itoa+0x3a>
    41da:	4a 30       	cpi	r20, 0x0A	; 10
    41dc:	29 f4       	brne	.+10     	; 0x41e8 <itoa+0x1c>
    41de:	97 fb       	bst	r25, 7
    41e0:	1e f4       	brtc	.+6      	; 0x41e8 <itoa+0x1c>
    41e2:	90 95       	com	r25
    41e4:	81 95       	neg	r24
    41e6:	9f 4f       	sbci	r25, 0xFF	; 255
    41e8:	64 2f       	mov	r22, r20
    41ea:	77 27       	eor	r23, r23
    41ec:	0e 94 17 21 	call	0x422e	; 0x422e <__udivmodhi4>
    41f0:	80 5d       	subi	r24, 0xD0	; 208
    41f2:	8a 33       	cpi	r24, 0x3A	; 58
    41f4:	0c f0       	brlt	.+2      	; 0x41f8 <itoa+0x2c>
    41f6:	89 5d       	subi	r24, 0xD9	; 217
    41f8:	81 93       	st	Z+, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	a1 f7       	brne	.-24     	; 0x41e8 <itoa+0x1c>
    4200:	16 f4       	brtc	.+4      	; 0x4206 <itoa+0x3a>
    4202:	5d e2       	ldi	r21, 0x2D	; 45
    4204:	51 93       	st	Z+, r21
    4206:	10 82       	st	Z, r1
    4208:	c9 01       	movw	r24, r18
    420a:	0c 94 07 21 	jmp	0x420e	; 0x420e <strrev>

0000420e <strrev>:
    420e:	dc 01       	movw	r26, r24
    4210:	fc 01       	movw	r30, r24
    4212:	67 2f       	mov	r22, r23
    4214:	71 91       	ld	r23, Z+
    4216:	77 23       	and	r23, r23
    4218:	e1 f7       	brne	.-8      	; 0x4212 <strrev+0x4>
    421a:	32 97       	sbiw	r30, 0x02	; 2
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <strrev+0x18>
    421e:	7c 91       	ld	r23, X
    4220:	6d 93       	st	X+, r22
    4222:	70 83       	st	Z, r23
    4224:	62 91       	ld	r22, -Z
    4226:	ae 17       	cp	r26, r30
    4228:	bf 07       	cpc	r27, r31
    422a:	c8 f3       	brcs	.-14     	; 0x421e <strrev+0x10>
    422c:	08 95       	ret

0000422e <__udivmodhi4>:
    422e:	aa 1b       	sub	r26, r26
    4230:	bb 1b       	sub	r27, r27
    4232:	51 e1       	ldi	r21, 0x11	; 17
    4234:	07 c0       	rjmp	.+14     	; 0x4244 <__udivmodhi4_ep>

00004236 <__udivmodhi4_loop>:
    4236:	aa 1f       	adc	r26, r26
    4238:	bb 1f       	adc	r27, r27
    423a:	a6 17       	cp	r26, r22
    423c:	b7 07       	cpc	r27, r23
    423e:	10 f0       	brcs	.+4      	; 0x4244 <__udivmodhi4_ep>
    4240:	a6 1b       	sub	r26, r22
    4242:	b7 0b       	sbc	r27, r23

00004244 <__udivmodhi4_ep>:
    4244:	88 1f       	adc	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	5a 95       	dec	r21
    424a:	a9 f7       	brne	.-22     	; 0x4236 <__udivmodhi4_loop>
    424c:	80 95       	com	r24
    424e:	90 95       	com	r25
    4250:	bc 01       	movw	r22, r24
    4252:	cd 01       	movw	r24, r26
    4254:	08 95       	ret

00004256 <_exit>:
    4256:	f8 94       	cli

00004258 <__stop_program>:
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <__stop_program>
